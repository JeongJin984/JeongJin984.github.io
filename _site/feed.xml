<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://JeongJin984.github.io</id><title>Jiny</title><subtitle>Jiny's Information</subtitle> <updated>2021-06-04T18:08:21+09:00</updated> <author> <name>Nam Jeong Jin</name> <uri>https://JeongJin984.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://JeongJin984.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 Nam Jeong Jin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Operation System</title><link href="https://JeongJin984.github.io/posts/Operation-System/" rel="alternate" type="text/html" title="Operation System" /><published>2021-06-04T15:30:00+09:00</published> <updated>2021-06-04T15:30:00+09:00</updated> <id>https://JeongJin984.github.io/posts/Operation-System/</id> <content src="https://JeongJin984.github.io/posts/Operation-System/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="CS" /> <category term="OS" /> <summary> Operation System 💿 프로세스 실행 중인 프로그램 프로그램은 디스크 상에 존재하며 실행을 위한 명령어와 정적 데이터의 묶음, 이러한 프로그램을 읽고 실행하며 생명을 불어넣는 것이 Operation System(운영체재) CPU 가상화 CPU 가 여러개 존재한다는 환상을 제공 시분할이라 불리는 기법은 원하는 수 만큼의 프로세스를 동시에 실행할 수 있게 한다. </summary> </entry> <entry><title>Computer Architecure 3</title><link href="https://JeongJin984.github.io/posts/Computer-Architecture-3/" rel="alternate" type="text/html" title="Computer Architecure 3" /><published>2021-06-04T01:00:00+09:00</published> <updated>2021-06-04T01:00:00+09:00</updated> <id>https://JeongJin984.github.io/posts/Computer-Architecture-3/</id> <content src="https://JeongJin984.github.io/posts/Computer-Architecture-3/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="CS" /> <category term="Computer-Architecture" /> <summary> Computer Architecure 3(ETC) 💿 기억 장치 프로그램, 데이터, 연산의 결과를 저장하는 장치, 주기억 장치와 보조기억 장치로 나눠지며. RAM, ROM도 이곳에 해당함. 분류 주기억 장치: 속도가 빠름, 데이터를 결과를 일시적으로 저징 보조기억장치: 속도가 느림, 데이터를 영구적으로 저장 💿 입출력 장치 입력과 출력 장치로 나누어짐 분류 입력장치: 마우스, 키보드등 컴퓨터로 데이터를 입력하는 장치 출력장치: 모니터, 스피커, 프린터등 컴퓨터에서 외부로 표하는 장치 💿 시스템 버스 하드웨어 구성 요소를 물리적으로 연결하는 선 분류 ... </summary> </entry> <entry><title>Computer Architecure 2</title><link href="https://JeongJin984.github.io/posts/Computer-Architecture-2/" rel="alternate" type="text/html" title="Computer Architecure 2" /><published>2021-06-04T01:00:00+09:00</published> <updated>2021-06-04T01:00:00+09:00</updated> <id>https://JeongJin984.github.io/posts/Computer-Architecture-2/</id> <content src="https://JeongJin984.github.io/posts/Computer-Architecture-2/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="CS" /> <category term="Computer-Architecture" /> <summary> Computer Architecure 2(HardWare-CPU) 두뇌에 해당하는 부분, 프로그램 명령어와 데이터를 읽어와 처리하고 명령어의 수행 순서를 제어함 💿 구성 전체 구성 ALU(산술논리연산장치): 비교와 연산을 담당 제어장치: 명령어의 해석과 실행을 담당 레지스터: 고속 기억장치, 명령어 주소, 코드 ,데이터 연산 결과등을 임시로 저장 제어장치의 구성 마이크로 프로그램이란 CPU의 레지스터나 연산회로를 제어할 수 있는 마이크로 명령어들의 집합 마이크로 프로그램 제어방식과 비교되는 방식은 하드 와이어드 제어방식으로 micro 방식은 cpu의 순차 동작을 프로그램 기법으로 실행하는 것이고 하드 와이어드 방식은 직접 전용 회로를 논리 회로대로... </summary> </entry> <entry><title>Computer Architecure 1</title><link href="https://JeongJin984.github.io/posts/Computer-Architecture-1/" rel="alternate" type="text/html" title="Computer Architecure 1" /><published>2021-06-04T01:00:00+09:00</published> <updated>2021-06-04T01:00:00+09:00</updated> <id>https://JeongJin984.github.io/posts/Computer-Architecture-1/</id> <content src="https://JeongJin984.github.io/posts/Computer-Architecture-1/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="CS" /> <category term="Computer-Architecture" /> <summary> Computer Architecure 1 💿 하드웨어 컴퓨터를 구성하는 기계적 장치 구성 CPU(중앙 처리 장치) 기억장치: RAM, HDD 입출력 장치: 마우스 프린터 위의 것들은 시스템 버스로 연결되어 있으며 시스템 버스는 데이터와 명령어, 제어신호를 각 장치로 실어나르는 역할을 한다. ___ 💿 소프트웨어 하드웨어의 동작을 지시하고 제어하는 명령어 집합 시스템 소프트웨어: 운영체제, 컴파일러 응용 소프트웨어: 워드 프로세서, 게임 등등 ___ 💿 고정 소수점 &amp;amp; 부동 소수점 컴퓨터의 실수를 표현하는 방법 고정 소수점 소수점이 찍힐 위치를 미리 정해놓고 소수를 표현하는 방식(정수 + 소수) 장점: 실수를 ... </summary> </entry> <entry><title>Design Pattern</title><link href="https://JeongJin984.github.io/posts/Design-Pattern/" rel="alternate" type="text/html" title="Design Pattern" /><published>2021-03-31T15:30:00+09:00</published> <updated>2021-03-31T15:30:00+09:00</updated> <id>https://JeongJin984.github.io/posts/Design-Pattern/</id> <content src="https://JeongJin984.github.io/posts/Design-Pattern/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Design" /> <category term="Pattern" /> <summary> Design Pattern 💿 UML 화살표 💿 추상 팩토리 패턴 상세화된 서브 클래스를 정의하지 않고도 서로 관련성이 있거나 독립적인 여러 객체의 군을 생성하기 위한 인터페이스 제공 한 팩토리에서 여러 객체의 군을 생성 이미 구현된 팩토리에서 어떤 종류의 객체를 생성할지 정해짐 create… 이런식으로 정해져있음 대신 팩토리의 종류가 달라짐 구상 클래스에 의존하지 않고 여러 개의 관련된 객체를 하나의 팩토리로 묶음 인자에 따라 관련된 객체들을 생성하는 팩토리의 종류가 결정됨 만들어질수 있는 팩토리가 정해져 있음 그에따라 만들어지는 Object도 결정됨 ConcreteFactory와... </summary> </entry> </feed>
