<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://localhost:4000</id><title>Jiny</title><subtitle>Jiny's Information</subtitle> <updated>2021-01-09T13:16:13+09:00</updated> <author> <name>Nam Jeong Jin</name> <uri>http://localhost:4000</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 Nam Jeong Jin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Java Interface</title><link href="http://localhost:4000/posts/Java-Interface/" rel="alternate" type="text/html" title="Java Interface" /><published>2021-01-09T14:09:00+09:00</published> <updated>2021-01-09T13:12:23+09:00</updated> <id>http://localhost:4000/posts/Java-Interface/</id> <content src="http://localhost:4000/posts/Java-Interface/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Java Interface Interface 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높이기 위해 인터페이스를 사용 Interface 정의 public interface 인터페이스명 { //상수 타입 상수명 = 값; //추상 메소드 타입 메소드명(매개변수, ... ); //디폴트 메소드 default 타입 메소드명(매개변수, ... ){ //구현부 } //정적 메소드 static 타입 메소드명(매개변수) { //구현부 } 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조 (절대적) 추상메소드 : 가이드 제공, 추상메소드를 오버라이팅해서 재구현 (강제적) 디폴트메소드 : 인터페이스에서 기본적으로 ... </summary> </entry> <entry><title>Spring Maven</title><link href="http://localhost:4000/posts/Spring-maven/" rel="alternate" type="text/html" title="Spring Maven" /><published>2021-01-01T12:13:00+09:00</published> <updated>2021-01-09T11:53:57+09:00</updated> <id>http://localhost:4000/posts/Spring-maven/</id> <content src="http://localhost:4000/posts/Spring-maven/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Maven 설정 자바 소스 설정 &amp;lt;build&amp;gt; &amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt; &amp;lt;/build&amp;gt; 자바소스 여러 개 설정 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;add-source-dir&amp;lt;/i... </summary> </entry> <entry><title>Java package</title><link href="http://localhost:4000/posts/Java-package/" rel="alternate" type="text/html" title="Java package" /><published>2021-01-01T11:08:00+09:00</published> <updated>2021-01-09T11:46:17+09:00</updated> <id>http://localhost:4000/posts/Java-package/</id> <content src="http://localhost:4000/posts/Java-package/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Package Package 클래스명의 고유성을 보장하기 위해서 사용 클래스를 구분짓는 폴더 개념 자바는 패키지의 가장 상위 디렉토리(root) 에서 실행해야한다는 약속이 있기 때문에 해당 패키지로 가서 컴파일 하지 않는다. 소스에 가장 첫 줄에 있어야하고, 패키지 선언은 소스 하나에 하나만 있어야한다. 패키지 이름과 위치한 폴더의 이름이 같아야한다. 패키지이름을 java로 시작하면 안된다. 모든 자바 패키지들은 가장 상위 패키지인 java와 javax 패키지에 종속 패키지를 정해주지 않는다면, 클래스는 기본적으로 “default package”에 속하게 되고 “default package”는 아무런 패키지 이름을 가지지 않는다. 패키지 명 ... </summary> </entry> <entry><title>Java Inheritance</title><link href="http://localhost:4000/posts/Java-Inheritance/" rel="alternate" type="text/html" title="Java Inheritance" /><published>2020-12-26T12:19:00+09:00</published> <updated>2021-01-01T23:21:29+09:00</updated> <id>http://localhost:4000/posts/Java-Inheritance/</id> <content src="http://localhost:4000/posts/Java-Inheritance/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Inheritance 상속의 특징 다중 상속 불가 자식 클래스는 부모 클래스로부터 메소드와 필드를 물려받아 사용 부모 클래스는 자식 클래스에서 정의한 메소드나 필드를 사용불가 부모 클래스는 여러 자식 클래스에게 상속이 가능 자바의 모든 클래스는 최상위 클래스 Object의 서브클래스이다. super 자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자(super())가 실행 자식 클래스의 생성자에 super()를 안써주면,자바는 부모 클래스의 기본 생성자를 탐색 오버라이딩 상속관계에 있는 클래스간에 같은 이름의 메서드를 재정의하는 문법 abstract class 추상 메서드를 포함하고 있다는 것을 제외하고는 일... </summary> </entry> <entry><title>Java Class</title><link href="http://localhost:4000/posts/Java-Class/" rel="alternate" type="text/html" title="Java Class" /><published>2020-12-19T15:30:00+09:00</published> <updated>2020-12-26T12:15:48+09:00</updated> <id>http://localhost:4000/posts/Java-Class/</id> <content src="http://localhost:4000/posts/Java-Class/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Java Class 클래스를 정의하는 방법 클래스의 구조 시그니처 다른 클래스로 확장(Extends) 선언 가능 (슈퍼 클래스, 서브 클래스 관계 설정) 확장(Extends) 시, 클래스의 멤버들 접근을 제어할 수 있음 (public, protected, private 등) 다른 클래스를 인터페이스(Interface)로 선언 가능 - 멤버 변수: Class 안의 기능을 끄집어 낼 때 사용 - 메서드: 기능을 나타냄 - 생성자: 처음에 초기화 해줄 값 클래스의 선언 public class Practice{ public static void main(String[] ar... </summary> </entry> </feed>
