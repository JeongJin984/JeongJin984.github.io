[ { "title": "Java Interface", "url": "/posts/Java-Interface/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-09 14:09:00 +0900", "snippet": "Java InterfaceInterface 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높이기 위해 인터페이스를 사용Interface 정의public interface 인터페이스명 {//상수타입 상수명 = 값;//추상 메소드타입 메소드명(매개변수, ... ); //디폴트 메소드default 타입 메소드명(매개변수, ... ){ //구현부}//정적 메소드static 타입 메소드명(매개변수) { //구현부} 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조 (절대적)..." }, { "title": "Spring Maven", "url": "/posts/Spring-maven/", "categories": "Java, Spring", "tags": "java, maven", "date": "2021-01-01 12:13:00 +0900", "snippet": "Maven 설정자바 소스 설정&amp;lt;build&amp;gt; &amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt;&amp;lt;/build&amp;gt;자바소스 여러 개 설정&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin..." }, { "title": "Java package", "url": "/posts/Java-package/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2021-01-01 11:08:00 +0900", "snippet": "PackagePackage 클래스명의 고유성을 보장하기 위해서 사용 클래스를 구분짓는 폴더 개념 자바는 패키지의 가장 상위 디렉토리(root) 에서 실행해야한다는 약속이 있기 때문에 해당 패키지로 가서 컴파일 하지 않는다. 소스에 가장 첫 줄에 있어야하고, 패키지 선언은 소스 하나에 하나만 있어야한다. 패키지 이름과 위치한 폴더의 이름이 같아야한다. 패키지이름을 java로 시작하면 안된다. 모든 자바 패키지들은 가장 상위 패키지인 java와 javax 패키지에 종속 패키지를 정해주지 않는다면, 클래스는 기본적으로..." }, { "title": "Java Inheritance", "url": "/posts/Java-Inheritance/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-12-26 12:19:00 +0900", "snippet": "Inheritance상속의 특징 다중 상속 불가 자식 클래스는 부모 클래스로부터 메소드와 필드를 물려받아 사용 부모 클래스는 자식 클래스에서 정의한 메소드나 필드를 사용불가 부모 클래스는 여러 자식 클래스에게 상속이 가능 자바의 모든 클래스는 최상위 클래스 Object의 서브클래스이다. super 자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자(super())가 실행 자식 클래스의 생성자에 super()를 안써주면,자바는 부모 클래스의 기본 생성자를 탐색오버라이딩 상속관계에 있는 클래..." }, { "title": "Java Class", "url": "/posts/Java-Class/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-12-19 15:30:00 +0900", "snippet": "Java Class클래스를 정의하는 방법 클래스의 구조 시그니처 다른 클래스로 확장(Extends) 선언 가능 (슈퍼 클래스, 서브 클래스 관계 설정) 확장(Extends) 시, 클래스의 멤버들 접근을 제어할 수 있음 (public, protected, private 등) 다른 클래스를 인터페이스(Interface)로 선언 가능 - 멤버 변수: Class 안의 기능을 끄집어 낼 때 사용 - 메서드: 기능을 나타냄 - 생성자: 처음에 초기화 해..." }, { "title": "Java-DataStructure", "url": "/posts/Java-DataStructure/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java DataStructureStack &amp;amp; QueueListNodepackage base;public class ListNode { public int data; public ListNode next; public ListNode(int input) { data = input; next = null; } @Override public String toString() { return String.valueOf(data); }}Linked..." }, { "title": "JUnit", "url": "/posts/JUnit/", "categories": "Java, JUnit", "tags": "java, junit", "date": "2020-11-28 15:30:00 +0900", "snippet": "JUnitJUnit 기초 @BeforeAll: 시작 전 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @AfterAll: 테스트 후 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @BeforeEach: 각 @Test 실행 전 실행하는 코드 @AfterEach: 각 @Test 실행 후 실행하는 코드 @DisplayName: class에 DisplayNameGeneration을 통해 만들어진 이름으로 테스트 코드 이름 변경Assertion asser..." }, { "title": "Java-Types", "url": "/posts/JavaType/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java Operator연산자개수에 따른 연산자 단항 연산자: 피연산자가 1개인 연산자 이항 연산자: 피연산자가 2개인 연산자 삼항 연산자: 피연산자가 3개인 연산자연산자 처리 순서 (), [] 단항 연산자: ++, –, +, -,(type), !, ~ 산술 연산자: %, /, *, +, - 시프트 연산자: », «, »&amp;gt; 관계 연산자: &amp;lt;, &amp;lt;=, &amp;gt;, != 논리 연산자” &amp;amp;, ^, ..." }, { "title": "Java-Basics", "url": "/posts/java-Basics/", "categories": "Java, Jasics", "tags": "java, datatype", "date": "2020-11-20 11:14:00 +0900", "snippet": "Java BasicsData Type메모리에 집접 담는가? Primitive Type(기본형): 직접 데이터를 담음 Reference Type(참조형): 메모리를 참조Primitive Type(기본형) 총 8가지의 기본형 타입(Primitive type)을 미리 정의하여 제공 기본값이 있기 때문에 Null이 존재하지 않는다. 만약 기본형 타입에 Null을 넣고 싶다면 래퍼 클래스를 활용 실제 값을 저장하는 공간으로 스택(Stack) 메모리에 저장된다. Java에는 C 처럼 Sizeof가 없으나 Primitive Ty..." }, { "title": "Spring-Web-MVC-2", "url": "/posts/Spring-Web-MVC2/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-20 01:14:00 +0900", "snippet": "Web MVC2DispatcherServlet Servlet Container에서 Http를 통해 들어오는 모든 요청을 Presentation 계층의 제일 앞에 둬서 중앙 집중식으로 처리 해 주는 Front Controller 즉, Client로부터 어떠한 요청이 오면 Tomcat(톰캣)과 같은 ServletContainer가 요청을 받는데 이때 제일 앞에서 서버로 들어오는 모든 요청을 처리하는 Front ControllerWhy? DispatcherServlet은 web.xml의 역할을 축소 기존에는 모..." }, { "title": "JVM", "url": "/posts/JVM/", "categories": "Java, Jasic", "tags": "java, jvm", "date": "2020-11-08 15:30:00 +0900", "snippet": "JVMJVM이란 JAVA Virtial Machine의 약자로 Java Byte Code를 OS에 맞게 해석해주는 역할을 하는 가상머신 Java Compiler는 .java파일을 .class라는 Java byte code로 변환 Byte 코드는 기계어가 아니기 때문에 OS에서 바로 실행이 안됨 JVM은 OS가 ByteCode를 이해할 수 있도록 해석해 주는 역할을 함 따라서 JVM은 c언어 같은 네이티브 언어에 비해 속도가 느렸지만 JIT(Just In Time)컴파일러 구현을 ..." }, { "title": "Spring-Web-MVC-1", "url": "/posts/Spring-Web-MVC/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-06 16:14:00 +0900", "snippet": "Web MVCServlet 클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술 특징 클라이언트의 요청에 대해 동적으로 작동하는 web-app Component html을 사용하여 요청에 응답 Java Thread를 이용하여 동작한다. MVC 패턴에 Controller로 이용된다. Http 서비스를 지원하는 javax.servlet.http.HttpServlet Class를 상속받는다. UDP보다 처리..." }, { "title": "Baekjoon-11053", "url": "/posts/Baekjoon-11053/", "categories": "Java, Algo", "tags": "baekjoon, dp", "date": "2020-11-04 23:40:00 +0900", "snippet": "가장 긴 증가하는 부분 수열코드import java.util.Scanner;public class Main { static int[] DP; static int[] arr; static int solution(int size) { int answer = 0; for(int i=1; i&amp;lt;=size; i++) { int max = 0; for(int j=1; j&amp;lt;=i; j++) { if(arr[j] ..." }, { "title": "Baekjoon-13913", "url": "/posts/Baekjoon-13913/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-11-04 23:40:00 +0900", "snippet": "숨바꼭질4코드import java.util.*;public class Main { static int[] visited = new int[100001]; static int[] path = new int[100001]; static Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); static void BFS(int start, int end) { Queue&amp;lt;Integer&amp;gt; queue = new Lin..." }, { "title": "Baekjoon-1697", "url": "/posts/Baekjoon-1697/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-11-04 22:40:00 +0900", "snippet": "숨바꼭질코드import java.util.*;public class Main { static int[] visited = new int[100001]; static void BFS(int start, int end) { Queue&amp;lt;Integer&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;(); queue.offer(start); visited[start] = 1; while(!queue.isEmpty()) { ..." }, { "title": "Baekjoon-10799", "url": "/posts/Baekjoon-10799/", "categories": "Java, Algo", "tags": "baekjoon, stack", "date": "2020-10-24 00:40:00 +0900", "snippet": "쇠막대기코드import java.util.Scanner;import java.util.Stack;public class Main { public static void main(String[] args) { // write your code here Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); Scanner scanner = new Scanner(System.in); String str = scanne..." }, { "title": "Baekjoon-1874", "url": "/posts/Baekjoon-1874/", "categories": "Java, Algo", "tags": "baekjoon, stack", "date": "2020-10-23 21:40:00 +0900", "snippet": "스택 수열코드import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Stack; public class Main { public static int N; // 입력받을 수열의 크기 public static int num = 1; // 수열을 만들기 위해 1 ~ N가 되는 수 public static int[] arr; ..." }, { "title": "Baekjoon-7576", "url": "/posts/Baekjoon-16929/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-23 21:40:00 +0900", "snippet": "Two Dot코드import java.util.*;import java.util.stream.IntStream;class Point { int i; int j; Point(int i, int j) { this.i = i; this.j = j; }}public class Main { static char[][] map; static int[][] visited; static int height; static int width; static int[] di ..." }, { "title": "Baekjoon-7576", "url": "/posts/Baekjoon-7562/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-23 11:40:00 +0900", "snippet": "나이트의 이동코드import java.util.*;import java.util.stream.IntStream;class Point { int i; int j; Point(int i, int j) { this.i = i; this.j = j; }}public class Main { static int startI; static int startJ; static int endI; static int endJ; static int size; static..." }, { "title": "Baekjoon-7576", "url": "/posts/Baekjoon-7576/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-23 00:40:00 +0900", "snippet": "토마토코드import java.io.*;import java.util.*;public class Main { static class Point { int i; int j; Point(int i, int j) { this.i = i; this.j = j; } } static int[][] map; static int[] di = {-1, 0, 1, 0}; static int[] dj = {0, 1, 0, -1}; ..." }, { "title": "Baekjoon-2178", "url": "/posts/Baekjoon-2178/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-22 18:40:00 +0900", "snippet": "미로 탐색코드import java.util.*;import java.util.stream.IntStream;class Point { public int i; public int j; Point(int i, int j) { this.i = i; this.j = j; }}public class Main { static int[][] map; static int[][] visited; static int[] dj = {-1, 0, 1, 0}; static int[]..." }, { "title": "Baekjoon-4963", "url": "/posts/Baekjoon-4963/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-21 18:40:00 +0900", "snippet": "섬의 갯수코드import java.util.*;import java.util.stream.IntStream;public class Main { static int[][] map; static boolean[][] visited; static List&amp;lt;Integer&amp;gt; result1; static List&amp;lt;Integer&amp;gt; result2 = new ArrayList&amp;lt;&amp;gt;(); static int width = 0; static ..." }, { "title": "Tensorflow2", "url": "/posts/Tensorflow2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "Tensorflow2개발 배경 Tensorflow1의 계산 그래프(세션) 사용의 복잡성 속도 직관성 면에서 모두 떨어짐 Keras가 사용성을 높여주나, 보다 유기적 결합 필요 Ecosystem변화와 특징 API 간소화 및 정리 사라진 주요 API Session control_dependencies, global_variables_initializer 1.x 버전 호환 API도 tf.compat.v1.Session..." }, { "title": "PyTorch-Basics", "url": "/posts/PyTorch/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "PyTorchTorch Lura 기반의 딥러닝 프레임워크로 Facebook, Twitter, Google의 개발자들이 개발 알고리즘 모듈화, 데이터 전처리, 시각화 유틸리티등 편이성이 있으나 사용자 커뮤니티문서화 부족Pytorch Torch의 직관성을 계승하고, 파이썬의 인터프리팅 특성에 맞게 즉각적으로 코드가 실행 되면서도 유연성과 빠른속도 제공특징 Define-by-Run 데이터를 계산하는 과정에서 동적으로 계싼 그래프가 구성됨 Python-first &amp;amp; Pytho-supp..." }, { "title": "Keras-Basics", "url": "/posts/Keras/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:10:08 +0900", "snippet": "KerasKeras 파이썬 기반의 쉽고 간결한 딥러닝 라이브러리 모듈화: 제공 모듈은 독립적이고, 설정 가능하며 제약이 적음 단순성: 간결하고 이해가 쉬우나 속도와 혁신성은 떨어질 수 있음 확장성: 새로운 클래스 및 함수로 모듈 추가 가능구성 모델 가장 핵심적인 데이터 구조 순차적(Sequential) 모델로 레이어를 쉽게 쌓을 수 있음 다중 출력 등 복잡한 모델은 Keras 함수 API 사용 학습 과정 데이터 생성 모델 구성 ..." }, { "title": "Deep Learning Basics3", "url": "/posts/Basic-DeepLearning3/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:13:08 +0900", "snippet": "Numpy&amp;amp;DeepLearningReluclass Relu: def __init__(self): self.mask = None def forward(self, x): self.mask = (x &amp;lt;= 0) out = x.copy() out[self.mask] = 0 return out def backward(self, dout): dout[self.mask] = 0 dx = dout re..." }, { "title": "Tensorflow1", "url": "/posts/Tensorflow1/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:10:08 +0900", "snippet": "Tensorflow BasicsTensor 벡터 계산을 단순화하기 위해 여러 같은 성질의 벡터를 한 행렬 안에 표기하고 그것을 단순화하여 표기한 것 Rank 텐서의 Rank는 간단히 말해서 ‘몇 차원 배열이냐’를 의미한다. Tensorflow Tensor를 Flow 시키면서 데이터를 처리하는 라이브러리 텐서는 계산 그래프 구조(Computational Graph)를 통해 노드에서 노드로 flow 계산 그래프(Computation Graph) 계산의 ..." }, { "title": "CPU &amp; GPU", "url": "/posts/CPU-GPU/", "categories": "HardWare, Basics", "tags": "cpu, gpu, dl", "date": "2020-10-20 18:00:08 +0900", "snippet": "CPU &amp;amp; GPUCPU 컴퓨터 시스템을 통제하고 프로그램의 연산을 실행하고 처리하는 가장 핵심적인 컴퓨터의 제어 장치 수많은 작업을 수행할 수 있는 범용 처리 장치GPU 고해상도의 이미지와 비디오를 고속으로 처리할 수 있도록 설계된 프로그래밍 가능한 프로세서 수천개의 프로세싱 코어가 동시에 다수의 데이터에 병렬 동작을 수행 GPGPU(General-Purpose computing on GPU) GPU의 실시간 대량 연산 특성을 활용해 특정 영역에서 CPU보다 좋은 계산 능력을 보여줄 수..." }, { "title": "Baekjoon-2667", "url": "/posts/Baekjoon-2667/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-18 18:40:00 +0900", "snippet": "이분 그래프코드import java.util.*;import java.util.stream.IntStream;public class Main { static List&amp;lt;Integer&amp;gt;[] graph; static int[] color; static int index = 1; static String result = &quot;YES&quot;; static boolean BFS(int cur) { Queue&amp;lt;Integer&amp;gt; queue = n..." }, { "title": "Baekjoon-1707", "url": "/posts/Baekjoon-1707/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-18 18:40:00 +0900", "snippet": "단지 번호 붙히기코드import java.util.*;import java.util.stream.IntStream;public class Main { static int[][] matrix; static boolean[][] visited; static List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(); static int count; static int size; static int[] dx = { 1, 0, -1, 0}..." }, { "title": "Baekjoon-11724", "url": "/posts/Baekjoon-11724/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-17 23:00:00 +0900", "snippet": "연결 요소의 개수코드import java.util.*;import java.util.stream.IntStream;public class Main { static List&amp;lt;Integer&amp;gt;[] list = new ArrayList[1001]; static boolean[] visited = new boolean[1003]; static int DFS(int cur) { int result = 0; visited[cur] = true; if(list[c..." }, { "title": "Baekjoon-1260", "url": "/posts/Baekjoon-1260/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-17 22:00:00 +0900", "snippet": "DFS와 BFS코드import java.util.*;import java.util.stream.IntStream;public class Main { static List&amp;lt;Integer&amp;gt;[] list = new ArrayList[1001]; static boolean[] visited = new boolean[1001]; static boolean[] visited2 = new boolean[1001]; //static Integer[] DFSroute = new Integer[10..." }, { "title": "Baekjoon-13023", "url": "/posts/Baekjoon-13023/", "categories": "Java, Algo", "tags": "baekjoon, graph", "date": "2020-10-16 13:21:00 +0900", "snippet": "ABCDE코드import java.util.*;public class Main { static Map&amp;lt;Integer, List&amp;lt;Integer&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); static boolean[] visited = new boolean[2001]; static int result; static void DFS(int value,int count) { if(count == 4) { ..." }, { "title": "Baekjoon-2250", "url": "/posts/Baekjoon-2250/", "categories": "Java, Algo", "tags": "baekjoon, tree", "date": "2020-10-15 23:53:00 +0900", "snippet": "백준 #2250코드import java.util.*;public class Main { static public Map&amp;lt;Integer, List&amp;lt;Integer&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); static int[] high = new int[10001]; static int[] low = new int[10001]; static int[] node = new int[10001]; static int nodeInde..." }, { "title": "Baekjoon-1991", "url": "/posts/Baekjoon-1991/", "categories": "Java, Algo", "tags": "baekjoon, tree", "date": "2020-10-15 21:50:00 +0900", "snippet": "백준 #1991코드import java.util.*;public class Main { static Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); private static void preorder(String v) { if(v. equals(&quot;.&quot;)) return; System.out.print(v); preorder(map.get(v).get(..." }, { "title": "Deep Learning Basics2", "url": "/posts/Basic-DeepLearning2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-12 19:13:08 +0900", "snippet": "용어 정리###epoch One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE###batch Total number of training examples present in a single batch.mini batch 경사하강 전체 데이터를 batch_size개씩 나눠 배치로 학습(배치 크기를 사용자가 지정) BGD보다 계산량이 적다. (Batch Size에 따라 계산량 조절 가능) S..." }, { "title": "Deep Learning Basics", "url": "/posts/Basic-DeepLearning/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-03 19:13:08 +0900", "snippet": "Introduction 인공 신경망이란 무엇인가?시냅스의 결합으로 네트워크를 형성한 인공 뉴런이 학습을 통해서 서로 간의 결합의 세기를 조정해 문제 해결능력을 갇는 비선형 모델종류 지도 학습 비지도 학습 강화 학습구조 입력 말 그대로 입력되는 방대한 양의 데이터를 의미 크게 자연어와 이미지로 분류됨 모델(뉴런) 가중치 값으로 구성된 행렬으로 입력값을 가중치 값에 곱해 hypothesis 값을 산출해 낸다 활성화 함수 뉴런을 통해 들어온 값을 특정한 함수를 통해 활성화 시키고 비 ..." }, { "title": "R-CNNs Tutorial", "url": "/posts/R-CNN-Tutroial/", "categories": "Vision, CNN", "tags": "rcnn, dl", "date": "2020-09-17 19:12:55 +0900", "snippet": "Intorduction기존의 Object detection은 입력영상안의 0~N개의 모든 클래스에 대해 Classifiaction을 수행해야 합니다. classification 과 localization을 수행하는 법에 대해서 알아보겠습니다.(참고: 이 포스트는 https://blog.lunit.io/2017/06/01/r-cnns-tutorial/를 참고하여 만들어 졌음을 알립니다.)Native Approach처음 떠오르는 방법은 가능한 모든 영역에 대해 sliding window 방식으로 이미지를 탐색하면 classific..." } ]
