[ { "title": "Operation System", "url": "/posts/Operation-System/", "categories": "CS, OS", "tags": "cs, os", "date": "2021-06-04 15:30:00 +0900", "snippet": "Operation System💿 프로세스 실행 중인 프로그램프로그램은 디스크 상에 존재하며 실행을 위한 명령어와 정적 데이터의 묶음, 이러한 프로그램을 읽고 실행하며 생명을 불어넣는 것이 Operation System(운영체재)CPU 가상화 CPU 가 여러개 존재한다는 환상을 제공시분할이라 불리는 기법은 원하는 수 만큼의 프로세스를 동시에 실행할 수 있게 한다." }, { "title": "Computer Architecure 3", "url": "/posts/Computer-Architecture-3/", "categories": "CS, Computer-Architecture", "tags": "cs, computerarchitecture, hardware", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 3(ETC)💿 기억 장치 프로그램, 데이터, 연산의 결과를 저장하는 장치, 주기억 장치와 보조기억 장치로 나눠지며. RAM, ROM도 이곳에 해당함. 분류 주기억 장치: 속도가 빠름, 데이터를 결과를 일시적으로 저징 보조기억장치: 속도가 느림, 데이터를 영구적으로 저장 💿 입출력 장치 입력과 출력 장치로 나누어짐 분류 입력장치: 마우스, 키보드등 컴퓨터로 데이터를 입력하는 장치 출력장치: 모니터, 스피커, 프린터등 컴퓨터에서..." }, { "title": "Computer Architecure 2", "url": "/posts/Computer-Architecture-2/", "categories": "CS, Computer-Architecture", "tags": "cs, computerarchitecture, hardware, cpu", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 2(HardWare-CPU) 두뇌에 해당하는 부분, 프로그램 명령어와 데이터를 읽어와 처리하고 명령어의 수행 순서를 제어함💿 구성전체 구성 ALU(산술논리연산장치): 비교와 연산을 담당 제어장치: 명령어의 해석과 실행을 담당 레지스터: 고속 기억장치, 명령어 주소, 코드 ,데이터 연산 결과등을 임시로 저장제어장치의 구성 마이크로 프로그램이란 CPU의 레지스터나 연산회로를 제어할 수 있는 마이크로 명령어들의 집합 마이크로 프로그램 제어방식과 비교되는 방식은 하드 와이어드 제어방식으..." }, { "title": "Computer Architecure 1", "url": "/posts/Computer-Architecture-1/", "categories": "CS, Computer-Architecture", "tags": "cs, computerarchitecture, hardware", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 1💿 하드웨어 컴퓨터를 구성하는 기계적 장치구성 CPU(중앙 처리 장치) 기억장치: RAM, HDD 입출력 장치: 마우스 프린터위의 것들은 시스템 버스로 연결되어 있으며 시스템 버스는 데이터와 명령어, 제어신호를 각 장치로 실어나르는 역할을 한다.___💿 소프트웨어 하드웨어의 동작을 지시하고 제어하는 명령어 집합 시스템 소프트웨어: 운영체제, 컴파일러 응용 소프트웨어: 워드 프로세서, 게임 등등___💿 고정 소수점 &amp;amp; 부동 소수점 컴퓨터의 실수를 표현하는 방법고..." }, { "title": "Design Pattern", "url": "/posts/Design-Pattern/", "categories": "Design, Pattern", "tags": "design, pattern, Gof", "date": "2021-03-31 15:30:00 +0900", "snippet": "Design Pattern💿 UML 화살표💿 추상 팩토리 패턴 상세화된 서브 클래스를 정의하지 않고도 서로 관련성이 있거나 독립적인 여러 객체의 군을 생성하기 위한 인터페이스 제공 한 팩토리에서 여러 객체의 군을 생성 이미 구현된 팩토리에서 어떤 종류의 객체를 생성할지 정해짐 create… 이런식으로 정해져있음 대신 팩토리의 종류가 달라짐 구상 클래스에 의존하지 않고 여러 개의 관련된 객체를 하나의 팩토리로 묶음 인자에 따라 관련된 객체들을 생성하는 팩토리의 종류가 결정됨 ..." }, { "title": "Spring QueryDsl", "url": "/posts/Spring-Spring-QueryDsl/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-03-22 21:30:00 +0900", "snippet": "Spring QueryDsl💿 기본 문법기본 검색 QueryMemer findMember = queryFactory .selectFrom(member) .where(member.username.eq(&quot;member1&quot;) .and(member.age.eq(10))) .findOne(); 검색 조건은 .and() 혹은 .or()를 메서드 체인으로 연결할 수 있다. selectFrom은 select() 와 from()을 합친 것결과 조회 fetch(): 리스트..." }, { "title": "Spring JPA 3", "url": "/posts/Spring-JPA-3/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-03-06 18:16:00 +0900", "snippet": "Spring JPA 3💿 Fetch Join &amp;amp; EAGER &amp;amp; LAZY즉시 로딩(EARGR로 설정) 멤버 전체를 조회하기 위해 JPQL 실행 select m from member m JPQL은 EAGER와 무관하게 SQL로 그대로 번역 -&amp;gt; select m.* from member JPQL 결과가 member만 조회하고, team은 조회하지 않음 member와 team이 즉시 로딩으로 설정되어 있기 때문에 연관된 팀을 각각 쿼리를 날려서 추가 조회 (N+1)지연 로딩(LAZY로 ..." }, { "title": "Functional programming1", "url": "/posts/Functional-Programming1/", "categories": "programming", "tags": "functional, basic", "date": "2021-03-05 23:42:00 +0900", "snippet": "함수형 프로그래밍(Functional Programming)🔘 함수형 프로그래밍 함수를 1급 객체로 취금하여 프로그래밍 하는 형식1급 객체(First Object) 변수나 데이터 구조안에 담을 수 있다. 파라미터로 전달 할 수 있다. 반환값으로 사용할 수 있다. 할당에 사용된 이름과 관계없이 고유한 구별이 가능하다. 동적으로 프로퍼티 할당이 가능하다.고차함수(High-Order Function) 람다 계산법에 의해 아래의 조건을 만족하는 함수 함수에 함수를 파라미터로 전달할 수 있다. 함수의 반환값으로 함수를 ..." }, { "title": "Java Lambda", "url": "/posts/Java-Lambda/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-03-05 23:40:00 +0900", "snippet": "Lambda함수형 프로그래밍 함수를 1급 객체로 취금하여 프로그래밍 하는 형식 자세한 것은 Funtional Programming 참고🔘 Lambda Expressions 식별자 없이 실행 가능한 함수(()-&amp;gt;{return foo;} or ()-&amp;gt; ()) 메서드를 하나의 식으로 표현하는 것 익명함수(anonymous function)이라고도 표현장점 가독성 간결성 멀티쓰레드 환경에 용이 함수를 만드는 과정없이 한번에 처리 -&amp;gt; 생산성단점 재사용 불가 디버깅이 어렵다 무..." }, { "title": "Java IO", "url": "/posts/Java-IO/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-02-27 23:40:00 +0900", "snippet": "I/OI/O input과 output의 약자로 입력과 출력을 나타낸다. 즉, 컴퓨터 내부 또는 외부와의 장치와 프로그램간의 데이터를 주고 받는 것을 말한다.NIO 스트림 기반 I/O에서는 데이터 소스와 데이터 싱크, 자바 프로그램간의 데이터 이동을 위해서 스트림을 사용한다. 자바 프로그램은 스트림으로부터 데이터를 읽거나 쓴다. 이러한 접근은 I/O 수행을 느리게 만든다. NIO는 스트림 기반 I/O는 느린 속도 문제를 해결한다. NIO에서는 I/O처리를 위해 채널과 버퍼를 사용한다. 채널은 stream과 비슷하다. 채널은 ..." }, { "title": "Spring-JPA-Querydsl", "url": "/posts/Spring-JPA-Querydsl/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-02-26 14:09:00 +0900", "snippet": "Spring JPA" }, { "title": "Spring-JPA-Entity", "url": "/posts/Spring-JPA-Entity/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-02-01 14:09:00 +0900", "snippet": "Spring JPAEntity 설계시 주의사항🔘 Entity에는 가급적 Setter를 사용하지 말자 변경 포인트가 많아서 유지보수가 어렵다.🔘 모든 연관관계는 LAZY(지연) LOADING으로 설정 Eager(즉시) Loading은 예측이 어렵고 어떤 SQL이 실행 될지 추적하기가 어렵다. 특히 JPQL을 실행하면 N+1 문제가 자주 발생한다.(select o from object)(무조건 같이 로딩되기 때문에) 연관된 Entity를 함께 DB에 조회해야 한다면, fetch join 또는 Ent..." }, { "title": "Java Generic", "url": "/posts/SQL-Basic/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-28 23:40:00 +0900", "snippet": "SQL🔘 데이터 어떤 필요에 의해 수집했지만 아직 특정 목적을 윟 ㅐ정제하지 않은 값 정보: 수집된 데이터를 어떤 목적을 위해 분석 가공하여 가치를 추가하거나 새로운 의미를 부여한 결과🔘 데이터 모델 계층형 나뭇가지 형태의 트리 구조를 활용하여 데이터 관련성을 계층별로 나누어 부모와 자식 같은 관계를 정의하고 데이터를 관리 객체 지향형 객체 지향 프로그래밍에서 사용하는 객체 개념을 기반으로 한 데이터 모델 관계형 데이터 간 관계에 초점을 둔 모델 ..." }, { "title": "Java Generic", "url": "/posts/Java-Generic/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-27 23:40:00 +0900", "snippet": "Generic🔘 Generic Data Type을 일반화 하는것을 의미 Classs 나 Method에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법 Class나 메서드 내부에서 사용되는 객체의 타입의 안정성을 높일 수 있다. 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다. Object 타입으로 사용시 다시 타입 변환을 해줘야 하는 번거로움이 있을 수 있다.장점 잘못된 타입이 사용될 수 있는 문제를 컴파일 과정에서 제거할 수 있기 때문 컴파일러는..." }, { "title": "Spring", "url": "/posts/Java-Annotation/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-26 23:40:00 +0900", "snippet": "Java Annotation🔘 Annotation 어노테이션의 역할도 주석과 크게 다르지 않는다. 일반주석과 큰 차이점은 코드를 작성할 수 있다는 것이 다르다. 코드를 작성할 수 있다는 뜻은 어노테이션으로 뭔가를 할 수 있다는 뜻이 된다. 어노테이션도 enum과 마찬가지로 1.5에 등장했다고 한다.🔘 Annotation 종류 @Retention 자바 컴파일러가 어노테이션을 다루는 방법을 기술하며, 특정 시점까지 영향을 미치는지를 결정 RetentionPolicy.SOURCE: 컴파일 전까지만 ..." }, { "title": "Spring JPA", "url": "/posts/2021-KAKAO-BLIND-RECRUITMENT-2/", "categories": "Java, Algo", "tags": "kako, test, coding", "date": "2021-01-24 18:16:00 +0900", "snippet": "2021 KAKAO BLIND RECRUITMENT-2문제 설명레스토랑을 운영하던 스카피는 코로나19로 인한 불경기를 극복하고자 메뉴를 새로 구성하려고 고민하고 있습니다.기존에는 단품으로만 제공하던 메뉴를 조합해서 코스요리 형태로 재구성해서 새로운 메뉴를 제공하기로 결정했습니다. 어떤 단품메뉴들을 조합해서 코스요리 메뉴로 구성하면 좋을 지 고민하던 스카피는 이전에 각 손님들이 주문할 때 가장 많이 함께 주문한 단품메뉴들을 코스요리 메뉴로 구성하기로 했습니다.단, 코스요리 메뉴는 최소 2가지 이상의 단품메뉴로 구성하려고 합니다...." }, { "title": "Spring JPA 2", "url": "/posts/Spring-JPA-2/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-01-24 18:16:00 +0900", "snippet": "Spring JPA 2💿 Entity Mapping@Entity Entity는 객체 관점에서 부르는 이름 보통 Class와 같은 이름을 사용하기 때문에 값을 변경하지 않음 Entity의 이름은 JQL에서 사용@Table Relation(database) 관점에서 부르는 이름 @Entity의 이름이 기본값 Table의 이름은 SQL에서 사용@Id Entity의 Primary Key를 매핑할 떄 사용 java의 모든 primitive 와 Wrapper 타입 사용 가능 Date랑 BigDecimal, ..." }, { "title": "Spring JPA", "url": "/posts/2021-KAKAO-BLIND-RECRUITMENT-1/", "categories": "Java, Algo", "tags": "kako, test, coding", "date": "2021-01-24 18:16:00 +0900", "snippet": "2021 KAKAO BLIND RECRUITMENT-1문제 설명카카오에 입사한 신입 개발자 네오는 카카오계정개발팀에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. 네오에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.다음은 카카오 아이디의 규칙입니다. 아이디의 길이는 3자 이상 15자 이하여야 합니다. 아이디는 알파벳 소문자, 숫자, 빼기(-..." }, { "title": "Spring JPA", "url": "/posts/Spring-JPA/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-01-24 18:16:00 +0900", "snippet": "Spring JPA💿 JPA 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스여기서 주목할 점은 바로 인터페이스라는 것이다. JPA는 특정 기능을 하는 라이브러리가 아니다. JPA는 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의한 방법이다.JPA는 단순히 interface이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의 대부분은 각종 Annotation 과 interface, enum, Exception으로 이루어져 있다. JPA의 핵심이..." }, { "title": "Thread Process", "url": "/posts/Thread-Process/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-22 23:40:00 +0900", "snippet": "Thread Process💿 Definition 프로그램: 파일이 저장 장치에 저장되어 있지만 메모리에는 올라가 있지 않은 정적인 상태를 말한다. 프로세스: 운영체제로부터 자원을 할당받은 작업의 단위. 스레드: 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위.💿 Thread &amp;amp; ProcessThread는 Process와 다르게 Thread 간 Memory를 공유하며 작동 즉 Thread는 Process의 자원을 공유하면서 Process 실행 흐름의 일부가 된다.💿 Thread 운영체제는 프로세스마다..." }, { "title": "Java Thread", "url": "/posts/Java-Thread/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-22 23:40:00 +0900", "snippet": "Java Thread💿 Thread LifeCycle New: Thread.start() 하면 실행됨 Runnable: start하면 runnable로 바뀜 Control이 Thread Scheduler로 가서 실행을 기다림 Running: Scheduler가 실행을 시킨 상태 Blocked Waiting for I/O resources Waiting for a monitor lock Waiting: 다른 Thread가 특정 action을 perform하길..." }, { "title": "Spring-Web", "url": "/posts/Spring-Web/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2021-01-21 23:17:00 +0900", "snippet": "Spring WebURL get, post는 기본 head: get과 같으나 header 정보만 가져옴 options 사용할 수 있는 http Method 제공 서버 또는 특정 리소스가 제공하는 기능을 확인 서버 또는 allow 응답 헤더에 사용할 수 있는 http method 목록 제공 @Controller request를 담당하는 annotation RestController는 자동으로 responsebody에 객체를 담아준다. @RequestMapping: Respons..." }, { "title": "Java Exception", "url": "/posts/Java-Exception/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-16 12:48:00 +0900", "snippet": "Java Exception목차 자바에서 예외 처리 방법 (try, catch, throw, throws, finally) 자바가 제공하는 예외 계층 구조 Exception과 Error의 차이는? RuntimeException과 RE가 아닌 것의 차이는? 커스텀한 예외 만드는 방법예외(Exception)와 에러(Error) 발생시점 컴파일 에러 런타임 에러 발생 원인 논리적 에러 시스템 에러 에러: 하드웨어의 오작동으로 실행 오류가 발생하는 것..." }, { "title": "Spring Security", "url": "/posts/Spring-Security/", "categories": "Java, Spring", "tags": "java, spring, security", "date": "2021-01-11 14:09:00 +0900", "snippet": "Spring SecuritySpring Security? 스프링 시큐리티는 스프링 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 하위 프레임 워크기본용어 접근 주체: 보호된 리소스에 접근하는 대상 인증(Authentication): 보호된 리소스에 접근한 대상에 대해 누구인지, App의 작업을 수행해도 되는 주체인지 확인하는 과정을 즉 누구인지 인가(Authorize): 해당 리소스에 대해 접근 권한을 가지고 있는지 확인하는 과정 즉 무엇을 할 수 있는지 ..." }, { "title": "Spring Security2", "url": "/posts/Spring-Security2/", "categories": "Java, Spring", "tags": "java, spring, security", "date": "2021-01-09 14:09:00 +0900", "snippet": "Spring Security-2DelegatingFilterProxy Spring Security가 모든 App 요청을 감싸게 해서 보안이 적용되게 하는 서블릿 필터 서블릿 필터는 스프링에서 정의된 빈을 주입해서 사용할 수 없음 특정한 이름을 가진 스프링 빈을 찾아 그 빈에게 요청을 위임 springSecurityFilterChain 이름으로 생성된 빈을 ApplicationContext에서 찾아 요청을 위임 실제 보안처리는 하지 않음 &amp;lt;filter&amp;gt; &am..." }, { "title": "Java Interface", "url": "/posts/Java-Interface/", "categories": "Java, Jasic", "tags": "java, basic", "date": "2021-01-09 14:09:00 +0900", "snippet": "Java InterfaceInterface 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높이기 위해 인터페이스를 사용Interface 정의public interface 인터페이스명 {//상수타입 상수명 = 값;//추상 메소드타입 메소드명(매개변수, ... ); //디폴트 메소드default 타입 메소드명(매개변수, ... ){ //구현부}//정적 메소드static 타입 메소드명(매개변수) { //구현부} 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조 (절대적)..." }, { "title": "Spring Maven", "url": "/posts/Spring-maven/", "categories": "Java, Spring", "tags": "java, maven", "date": "2021-01-01 12:13:00 +0900", "snippet": "Maven 설정자바 소스 설정&amp;lt;build&amp;gt; &amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt;&amp;lt;/build&amp;gt;자바소스 여러 개 설정&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;l..." }, { "title": "Java package", "url": "/posts/Java-package/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2021-01-01 11:08:00 +0900", "snippet": "PackagePackage 클래스명의 고유성을 보장하기 위해서 사용 클래스를 구분짓는 폴더 개념 자바는 패키지의 가장 상위 디렉토리(root) 에서 실행해야한다는 약속이 있기 때문에 해당 패키지로 가서 컴파일 하지 않는다. 소스에 가장 첫 줄에 있어야하고, 패키지 선언은 소스 하나에 하나만 있어야한다. 패키지 이름과 위치한 폴더의 이름이 같아야한다. 패키지이름을 java로 시작하면 안된다. 모든 자바 패키지들은 가장 상위 패키지인 java와 javax 패키지에 종속 패키지를 정해주지 않는다면, 클래스는 기본적으로..." }, { "title": "Java Inheritance", "url": "/posts/Java-Inheritance/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-12-26 12:19:00 +0900", "snippet": "Inheritance상속의 특징 다중 상속 불가 자식 클래스는 부모 클래스로부터 메소드와 필드를 물려받아 사용 부모 클래스는 자식 클래스에서 정의한 메소드나 필드를 사용불가 부모 클래스는 여러 자식 클래스에게 상속이 가능 자바의 모든 클래스는 최상위 클래스 Object의 서브클래스이다. super 자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자(super())가 실행 자식 클래스의 생성자에 super()를 안써주면,자바는 부모 클래스의 기본 생성자를 탐색오버라이딩 상속관계에 있는 클래..." }, { "title": "Java Class", "url": "/posts/Java-Class/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-12-19 15:30:00 +0900", "snippet": "Java Class클래스를 정의하는 방법 클래스의 구조 시그니처 다른 클래스로 확장(Extends) 선언 가능 (슈퍼 클래스, 서브 클래스 관계 설정) 확장(Extends) 시, 클래스의 멤버들 접근을 제어할 수 있음 (public, protected, private 등) 다른 클래스를 인터페이스(Interface)로 선언 가능 - 멤버 변수: Class 안의 기능을 끄집어 낼 때 사용 - 메서드: 기능을 나타냄 - 생성자: 처음에 초기화 해..." }, { "title": "Java Reflection", "url": "/posts/Java-Reflection/", "categories": "Java, Spring", "tags": "java, reflection", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java Reflection리플렉션의 시작은 ClassClass에 접근하는 방법 모든 클래스를 로딩한 다음 Class의 인스턴스가 생긴다.(static 이므로) &quot;Type.class&quot;로 접근할 수 있다.public class DemoSpringDiApplication { public static void main(String[] args) throws ClassNotFoundException { Class&amp;lt;Book&amp;gt; bookClass = Book.class; ..." }, { "title": "Java-DataStructure", "url": "/posts/Java-DataStructure/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java DataStructureStack &amp;amp; QueueListNodepackage base;public class ListNode { public int data; public ListNode next; public ListNode(int input) { data = input; next = null; } @Override public String toString() { return String.valueOf(data); }}Linked..." }, { "title": "JUnit", "url": "/posts/JUnit/", "categories": "Java, JUnit", "tags": "java, junit", "date": "2020-11-28 15:30:00 +0900", "snippet": "JUnitJUnit 기초 @BeforeAll: 시작 전 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @AfterAll: 테스트 후 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @BeforeEach: 각 @Test 실행 전 실행하는 코드 @AfterEach: 각 @Test 실행 후 실행하는 코드 @DisplayName: class에 DisplayNameGeneration을 통해 만들어진 이름으로 테스트 코드 이름 변경Assertion asser..." }, { "title": "Java-Types", "url": "/posts/JavaType/", "categories": "Java, Jasic", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java Operator연산자개수에 따른 연산자 단항 연산자: 피연산자가 1개인 연산자 이항 연산자: 피연산자가 2개인 연산자 삼항 연산자: 피연산자가 3개인 연산자연산자 처리 순서 (), [] 단항 연산자: ++, –, +, -,(type), !, ~ 산술 연산자: %, /, *, +, - 시프트 연산자: », «, »&amp;gt; 관계 연산자: &amp;lt;, &amp;lt;=, &amp;gt;, != 논리 연산자: &amp;amp;, ^, ..." }, { "title": "Java-Basics", "url": "/posts/java-Basics/", "categories": "Java, Jasics", "tags": "java, datatype", "date": "2020-11-20 11:14:00 +0900", "snippet": "Java BasicsData Type메모리에 집접 담는가? Primitive Type(기본형): 직접 데이터를 담음 Reference Type(참조형): 메모리를 참조Primitive Type(기본형) 총 8가지의 기본형 타입(Primitive type)을 미리 정의하여 제공 기본값이 있기 때문에 Null이 존재하지 않는다. 만약 기본형 타입에 Null을 넣고 싶다면 래퍼 클래스를 활용 실제 값을 저장하는 공간으로 스택(Stack) 메모리에 저장된다. Java에는 C 처럼 Sizeof가 없으나 Primitive Ty..." }, { "title": "Spring-Web-MVC-2", "url": "/posts/Spring-Web-MVC2/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-20 01:14:00 +0900", "snippet": "Web MVC2DispatcherServlet Servlet Container에서 Http를 통해 들어오는 모든 요청을 Presentation 계층의 제일 앞에 둬서 중앙 집중식으로 처리 해 주는 Front Controller 즉, Client로부터 어떠한 요청이 오면 Tomcat(톰캣)과 같은 ServletContainer가 요청을 받는데 이때 제일 앞에서 서버로 들어오는 모든 요청을 처리하는 Front ControllerWhy? DispatcherServlet은 web.xml의 역할을 축소 기존에는 모..." }, { "title": "JVM", "url": "/posts/JVM/", "categories": "Java, Jasic", "tags": "java, jvm", "date": "2020-11-08 15:30:00 +0900", "snippet": "JVMJVM이란 JAVA Virtial Machine의 약자로 Java Byte Code를 OS에 맞게 해석해주는 역할을 하는 가상머신 Java Compiler는 .java파일을 .class라는 Java byte code로 변환 Byte 코드는 기계어가 아니기 때문에 OS에서 바로 실행이 안됨 JVM은 OS가 ByteCode를 이해할 수 있도록 해석해 주는 역할을 함 따라서 JVM은 c언어 같은 네이티브 언어에 비해 속도가 느렸지만 JIT(Just In Time)컴파일러 구현을 ..." }, { "title": "Spring-Web-MVC-1", "url": "/posts/Spring-Web-MVC/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-06 16:14:00 +0900", "snippet": "Web MVCServlet 클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술 특징 클라이언트의 요청에 대해 동적으로 작동하는 web-app Component html을 사용하여 요청에 응답 Java Thread를 이용하여 동작한다. MVC 패턴에 Controller로 이용된다. Http 서비스를 지원하는 javax.servlet.http.HttpServlet Class를 상속받는다. UDP보다 처리..." }, { "title": "Tensorflow2", "url": "/posts/Tensorflow2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "Tensorflow2개발 배경 Tensorflow1의 계산 그래프(세션) 사용의 복잡성 속도 직관성 면에서 모두 떨어짐 Keras가 사용성을 높여주나, 보다 유기적 결합 필요 Ecosystem변화와 특징 API 간소화 및 정리 사라진 주요 API Session control_dependencies, global_variables_initializer 1.x 버전 호환 API도 tf.compat.v1.Session..." }, { "title": "PyTorch-Basics", "url": "/posts/PyTorch/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "PyTorchTorch Lura 기반의 딥러닝 프레임워크로 Facebook, Twitter, Google의 개발자들이 개발 알고리즘 모듈화, 데이터 전처리, 시각화 유틸리티등 편이성이 있으나 사용자 커뮤니티문서화 부족Pytorch Torch의 직관성을 계승하고, 파이썬의 인터프리팅 특성에 맞게 즉각적으로 코드가 실행 되면서도 유연성과 빠른속도 제공특징 Define-by-Run 데이터를 계산하는 과정에서 동적으로 계싼 그래프가 구성됨 Python-first &amp;amp; Pytho-supp..." }, { "title": "Keras-Basics", "url": "/posts/Keras/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:10:08 +0900", "snippet": "KerasKeras 파이썬 기반의 쉽고 간결한 딥러닝 라이브러리 모듈화: 제공 모듈은 독립적이고, 설정 가능하며 제약이 적음 단순성: 간결하고 이해가 쉬우나 속도와 혁신성은 떨어질 수 있음 확장성: 새로운 클래스 및 함수로 모듈 추가 가능구성 모델 가장 핵심적인 데이터 구조 순차적(Sequential) 모델로 레이어를 쉽게 쌓을 수 있음 다중 출력 등 복잡한 모델은 Keras 함수 API 사용 학습 과정 데이터 생성 모델 구성 ..." }, { "title": "Deep Learning Basics3", "url": "/posts/Basic-DeepLearning3/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:13:08 +0900", "snippet": "Numpy&amp;amp;DeepLearningReluclass Relu: def __init__(self): self.mask = None def forward(self, x): self.mask = (x &amp;lt;= 0) out = x.copy() out[self.mask] = 0 return out def backward(self, dout): dout[self.mask] = 0 dx = dout re..." }, { "title": "Tensorflow1", "url": "/posts/Tensorflow1/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:10:08 +0900", "snippet": "Tensorflow BasicsTensor 벡터 계산을 단순화하기 위해 여러 같은 성질의 벡터를 한 행렬 안에 표기하고 그것을 단순화하여 표기한 것 Rank 텐서의 Rank는 간단히 말해서 ‘몇 차원 배열이냐’를 의미한다. Tensorflow Tensor를 Flow 시키면서 데이터를 처리하는 라이브러리 텐서는 계산 그래프 구조(Computational Graph)를 통해 노드에서 노드로 flow 계산 그래프(Computation Graph) 계산의 ..." }, { "title": "CPU &amp; GPU", "url": "/posts/CPU-GPU/", "categories": "HardWare, Basics", "tags": "cpu, gpu, dl", "date": "2020-10-20 18:00:08 +0900", "snippet": "CPU &amp;amp; GPUCPU 컴퓨터 시스템을 통제하고 프로그램의 연산을 실행하고 처리하는 가장 핵심적인 컴퓨터의 제어 장치 수많은 작업을 수행할 수 있는 범용 처리 장치GPU 고해상도의 이미지와 비디오를 고속으로 처리할 수 있도록 설계된 프로그래밍 가능한 프로세서 수천개의 프로세싱 코어가 동시에 다수의 데이터에 병렬 동작을 수행 GPGPU(General-Purpose computing on GPU) GPU의 실시간 대량 연산 특성을 활용해 특정 영역에서 CPU보다 좋은 계산 능력을 보여줄 수..." }, { "title": "Deep Learning Basics2", "url": "/posts/Basic-DeepLearning2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-12 19:13:08 +0900", "snippet": "용어 정리###epoch One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE###batch Total number of training examples present in a single batch.mini batch 경사하강 전체 데이터를 batch_size개씩 나눠 배치로 학습(배치 크기를 사용자가 지정) BGD보다 계산량이 적다. (Batch Size에 따라 계산량 조절 가능) S..." }, { "title": "Deep Learning Basics", "url": "/posts/Basic-DeepLearning/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-03 19:13:08 +0900", "snippet": "Introduction 인공 신경망이란 무엇인가?시냅스의 결합으로 네트워크를 형성한 인공 뉴런이 학습을 통해서 서로 간의 결합의 세기를 조정해 문제 해결능력을 갇는 비선형 모델종류 지도 학습 비지도 학습 강화 학습구조 입력 말 그대로 입력되는 방대한 양의 데이터를 의미 크게 자연어와 이미지로 분류됨 모델(뉴런) 가중치 값으로 구성된 행렬으로 입력값을 가중치 값에 곱해 hypothesis 값을 산출해 낸다 활성화 함수 뉴런을 통해 들어온 값을 특정한 함수를 통해 활성화 시키고 비 ..." }, { "title": "R-CNNs Tutorial", "url": "/posts/R-CNN-Tutroial/", "categories": "Vision, CNN", "tags": "rcnn, dl", "date": "2020-09-17 19:12:55 +0900", "snippet": "Intorduction기존의 Object detection은 입력영상안의 0~N개의 모든 클래스에 대해 Classifiaction을 수행해야 합니다. classification 과 localization을 수행하는 법에 대해서 알아보겠습니다.(참고: 이 포스트는 https://blog.lunit.io/2017/06/01/r-cnns-tutorial/를 참고하여 만들어 졌음을 알립니다.)Native Approach처음 떠오르는 방법은 가능한 모든 영역에 대해 sliding window 방식으로 이미지를 탐색하면 classific..." } ]
