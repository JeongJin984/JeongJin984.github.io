I"rF<h1 id="inheritance">Inheritance</h1>
<hr />

<h2 id="상속의-특징">상속의 특징</h2>

<ul>
  <li>다중 상속 불가</li>
  <li>자식 클래스는 부모 클래스로부터 메소드와 필드를 물려받아 사용</li>
  <li>부모 클래스는 자식 클래스에서 정의한 메소드나 필드를 사용불가</li>
  <li>부모 클래스는 여러 자식 클래스에게 상속이 가능</li>
  <li>자바의 모든 클래스는 최상위 클래스 Object의 서브클래스이다.</li>
  <li>
    <h2 id="super">super</h2>
  </li>
</ul>

<blockquote>
  <p>자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자(super())가 실행</p>
</blockquote>

<ul>
  <li>자식 클래스의 생성자에 super()를 안써주면,자바는 부모 클래스의 기본 생성자를 탐색</li>
</ul>

<h2 id="오버라이딩">오버라이딩</h2>

<blockquote>
  <p>상속관계에 있는 클래스간에 같은 이름의 메서드를 재정의하는 문법</p>
</blockquote>

<h2 id="abstract-class">abstract class</h2>

<blockquote>
  <p>추상 메서드를 포함하고 있다는 것을 제외하고는 일반 클래스와 전혀 다르지 않다.</p>
</blockquote>

<h2 id="final-키워드">final 키워드</h2>

<ul>
  <li>로컬 원시 변수: final로 선언하면 한번 초기화된 변수 상수화</li>
  <li>객체 타입: 변수에 다른 참조 값을 지정 불가</li>
  <li>메서드 인자: 메서드 안에서 변수값을 변경 불가</li>
  <li>멤버 변수: 생성자 메서드가 끝나기 전에 초기화 되면 상수 값이 되거나 write-once 필드로 한번만 쓰이게 됨</li>
  <li>메서드: 메서드를 final로 선언하면 상속받은 클래스에서 오버라이드가 불가능</li>
  <li>클래스: 클래스에 final을 선언하면 상속 불가</li>
</ul>

<h2 id="object-클래스">Object 클래스</h2>

<blockquote>
  <p>자바 API의 모든 클래스와 사용자가 정의한 모든 클래스의 최상위 클래스</p>
</blockquote>

<p><strong>주요 메서드</strong>
<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbe197E%2FbtqQPz6HMyE%2F7mhGrpYglbeD6QNJQVJkhk%2Fimg.png" alt="image" /><em>http://www.tcpschool.com/java/java_api_object</em></p>

<h2 id="dynamic-dispatch">Dynamic Dispatch</h2>

<blockquote>
  <p>컴파일타임에는 알 수 없는 메서드의 의존성을 런타임에 늦게 바인딩</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Dispatchable</span> <span class="n">dispatch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dispatch</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dispatch</span><span class="o">.</span><span class="na">method</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Dispatch</span> <span class="kd">implements</span> <span class="nc">Dispatchable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">method</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"hello dispatch"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Dispatchable</span><span class="o">{</span>
    <span class="nc">String</span> <span class="nf">method</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>이 경우 컴파일러는 타입에 대한 정보를 알고있으므로 런타임시에 호출 객체를 확인해 해당 객체의 메서드를 호출</li>
  <li>런타임시에 호출 객체를 알 수 있으므로 바이트코드에도 어떤 객체의 메서드를 호출해야하는지 드러나지 않는다.</li>
  <li>자바는 묵시적으로 항상 호출 객체를 인자로 보내게된다. 이 this를 통해 메서드 내부에서 호출 객체 참조 가능</li>
  <li>이는 클래스를 상속했을 때에도 동일하게 적용 된다.</li>
</ul>

<h2 id="double-dispatch">Double Dispatch</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SmartPhone</span><span class="o">&gt;</span> <span class="n">phoneList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">Iphone</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">Gallaxy</span><span class="o">());</span>
        <span class="nc">Game</span> <span class="n">game</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Game</span><span class="o">();</span>
        <span class="n">phoneList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nl">game:</span><span class="o">:</span><span class="n">play</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">SmartPhone</span><span class="o">{</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Iphone</span> <span class="kd">implements</span> <span class="nc">SmartPhone</span><span class="o">{</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Gallaxy</span> <span class="kd">implements</span> <span class="nc">SmartPhone</span><span class="o">{</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Game</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">(</span><span class="nc">SmartPhone</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"game play ["</span> <span class="o">+</span><span class="n">phone</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td> --><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Game</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">(</span><span class="nc">SmartPhone</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">phone</span> <span class="k">instanceof</span> <span class="nc">Iphone</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"iphone play ["</span> <span class="o">+</span> <span class="n">phone</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="n">phone</span> <span class="k">instanceof</span> <span class="nc">Gallaxy</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"gallaxy play ["</span> <span class="o">+</span> <span class="n">phone</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>만약 SmartPhone의 구현체로 Optimus가 추가된다면 Game 클래스까지 변경이 발생</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Game</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">(</span><span class="nc">Iphone</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"iphone play ["</span> <span class="o">+</span> <span class="n">phone</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">(</span><span class="nc">Gallaxy</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"gallaxy play ["</span> <span class="o">+</span> <span class="n">phone</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SmartPhone</span><span class="o">&gt;</span> <span class="n">phoneList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">Iphone</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">Gallaxy</span><span class="o">());</span>
    <span class="nc">Game</span> <span class="n">game</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Game</span><span class="o">();</span>
    <span class="n">phoneList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nl">game:</span><span class="o">:</span><span class="n">play</span><span class="o">);</span> <span class="c1">// 컴파일 에러 발생</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>자바는 묵시적 형변환 지원X
    <ul>
      <li>2개의 요소가 서로 타입이 다르므로 명시적 형변환을 하려면 반복문을 사용할 수 없다.</li>
      <li>제네릭같은 방법을 이용한다고 하더라도 구현체마다 다른 행동을 해야하므로 하나의 메서드로 모으는건 의미가 없다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>런타임시에 어떤 객체가 들어오는지를 확인해서 서로 다른 메서드를 호출해주는 동적 디스패치가 존재한다면 이를 인자에도 적용?
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>지원 않됨</li>
</ul>

<blockquote>
  <p>이런 이유로 자바를 싱글 디스패치(Single Dispatch) 언어라고 한다.</p>
</blockquote>

<p><strong>해결책</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td> --><td class="rouge-code"><pre><span class="kd">interface</span> <span class="nc">SmartPhone</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">game</span><span class="o">(</span><span class="nc">Game</span> <span class="n">game</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Iphone</span> <span class="kd">implements</span> <span class="nc">SmartPhone</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">game</span><span class="o">(</span><span class="nc">Game</span> <span class="n">game</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"iphone play ["</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Gallaxy</span> <span class="kd">implements</span> <span class="nc">SmartPhone</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">game</span><span class="o">(</span><span class="nc">Game</span> <span class="n">game</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"gallaxy play ["</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Game</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">(</span><span class="nc">SmartPhone</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span><span class="o">.</span><span class="na">game</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>play() 메서드를 찾기위한 정적 디스패치가 발생</li>
  <li>game()메서드를 호출하는 객체를 찾기위한 동적 디스패치가 발생</li>
</ol>

<ul>
  <li>동적 디스패치가 1번 더 발생하면서 생기는 더블 디스패치(Double Dispatch)</li>
</ul>
:ET