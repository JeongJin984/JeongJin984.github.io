I"¢3<h1 id="Ïù¥Î∂Ñ-Í∑∏ÎûòÌîÑ"><strong>Ïù¥Î∂Ñ Í∑∏ÎûòÌîÑ</strong></h1>
<hr />

<h2 id="ÏΩîÎìú"><strong>ÏΩîÎìú</strong></h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">graph</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">color</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">"YES"</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">BFS</span><span class="o">(</span><span class="kt">int</span> <span class="n">cur</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">cur</span><span class="o">);</span>
        <span class="n">color</span><span class="o">[</span><span class="n">cur</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>

            <span class="k">if</span><span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">next</span> <span class="o">:</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">color</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">==</span> <span class="n">color</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="s">"NO"</span><span class="o">;</span>
                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">color</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">color</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">=</span> <span class="n">color</span><span class="o">[</span><span class="n">node</span><span class="o">]</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// write your code here</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">testSize</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">testSize</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">nodes</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

            <span class="n">color</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nodes</span> <span class="o">+</span> <span class="mi">10</span><span class="o">];</span>
            <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="n">nodes</span> <span class="o">+</span> <span class="mi">10</span><span class="o">];</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
                <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">graph</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">graph</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

                <span class="n">graph</span><span class="o">[</span><span class="n">start</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">end</span><span class="o">);</span>
                <span class="n">graph</span><span class="o">[</span><span class="n">end</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">nodes</span> <span class="o">+</span> <span class="mi">1</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">color</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!</span><span class="no">BFS</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="s">"YES"</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h2 id="Î¨∏Ï†ú"><strong>Î¨∏Ï†ú</strong></h2>

<p>Í∑∏ÎûòÌîÑÏùò Ï†ïÏ†êÏùò ÏßëÌï©ÏùÑ ÎëòÎ°ú Î∂ÑÌï†ÌïòÏó¨, Í∞Å ÏßëÌï©Ïóê ÏÜçÌïú Ï†ïÏ†êÎÅºÎ¶¨Îäî ÏÑúÎ°ú Ïù∏Ï†ëÌïòÏßÄ ÏïäÎèÑÎ°ù Î∂ÑÌï†Ìï† Ïàò ÏûàÏùÑ Îïå, Í∑∏Îü¨Ìïú Í∑∏ÎûòÌîÑÎ•º ÌäπÎ≥ÑÌûà Ïù¥Î∂Ñ Í∑∏ÎûòÌîÑ (Bipartite Graph) Îùº Î∂ÄÎ•∏Îã§.</p>

<p>Í∑∏ÎûòÌîÑÍ∞Ä ÏûÖÎ†•ÏúºÎ°ú Ï£ºÏñ¥Ï°åÏùÑ Îïå, Ïù¥ Í∑∏ÎûòÌîÑÍ∞Ä Ïù¥Î∂Ñ Í∑∏ÎûòÌîÑÏù∏ÏßÄ ÏïÑÎãåÏßÄ ÌåêÎ≥ÑÌïòÎäî ÌîÑÎ°úÍ∑∏Îû®ÏùÑ ÏûëÏÑ±ÌïòÏãúÏò§.</p>

<h2 id="ÏûÖÎ†•"><strong>ÏûÖÎ†•</strong></h2>

<p>ÏûÖÎ†•ÏùÄ Ïó¨Îü¨ Í∞úÏùò ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§Î°ú Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÎç∞, Ï≤´Ïß∏ Ï§ÑÏóê ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§Ïùò Í∞úÏàò K(2‚â§K‚â§5)Í∞Ä Ï£ºÏñ¥ÏßÑÎã§. Í∞Å ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§Ïùò Ï≤´Ïß∏ Ï§ÑÏóêÎäî Í∑∏ÎûòÌîÑÏùò Ï†ïÏ†êÏùò Í∞úÏàò V(1‚â§V‚â§20,000)ÏôÄ Í∞ÑÏÑ†Ïùò Í∞úÏàò E(1‚â§E‚â§200,000)Í∞Ä Îπà Ïπ∏ÏùÑ ÏÇ¨Ïù¥Ïóê ÎëêÍ≥† ÏàúÏÑúÎåÄÎ°ú Ï£ºÏñ¥ÏßÑÎã§. Í∞Å Ï†ïÏ†êÏóêÎäî 1Î∂ÄÌÑ∞ VÍπåÏßÄ Ï∞®Î°ÄÎ°ú Î≤àÌò∏Í∞Ä Î∂ôÏñ¥ ÏûàÎã§. Ïù¥Ïñ¥ÏÑú ÎëòÏß∏ Ï§ÑÎ∂ÄÌÑ∞ EÍ∞úÏùò Ï§ÑÏóê Í±∏Ï≥ê Í∞ÑÏÑ†Ïóê ÎåÄÌïú Ï†ïÎ≥¥Í∞Ä Ï£ºÏñ¥ÏßÄÎäîÎç∞, Í∞Å Ï§ÑÏóê Ïù∏Ï†ëÌïú Îëê Ï†ïÏ†êÏùò Î≤àÌò∏Í∞Ä Îπà Ïπ∏ÏùÑ ÏÇ¨Ïù¥Ïóê ÎëêÍ≥† Ï£ºÏñ¥ÏßÑÎã§.</p>

<h2 id="Ï∂úÎ†•"><strong>Ï∂úÎ†•</strong></h2>

<p>KÍ∞úÏùò Ï§ÑÏóê Í±∏Ï≥ê ÏûÖÎ†•ÏúºÎ°ú Ï£ºÏñ¥ÏßÑ Í∑∏ÎûòÌîÑÍ∞Ä Ïù¥Î∂Ñ Í∑∏ÎûòÌîÑÏù¥Î©¥ YES, ÏïÑÎãàÎ©¥ NOÎ•º ÏàúÏÑúÎåÄÎ°ú Ï∂úÎ†•ÌïúÎã§.</p>

<h2 id="ÏòàÏãú"><strong>ÏòàÏãú</strong></h2>

<ul>
  <li>ÏûÖÎ†•</li>
</ul>

<pre>
    2
    3 2
    1 3
    2 3
    4 4
    1 2
    2 3
    3 4
    4 2
</pre>

<p>-Ï∂úÎ†•</p>

<pre>
    YES
    NO
</pre>

<h2 id="Í∏∞Î≥∏-Ïª®ÏÖâ"><strong>Í∏∞Î≥∏ Ïª®ÏÖâ</strong></h2>

<blockquote>
  <p>Í∏∞Î≥∏Ï†ÅÏù∏ DFS or BFS</p>
</blockquote>

<ul>
  <li>Ïó∞Í≤∞Îêú Ïù∏Ï†ë ÎÖ∏ÎìúÎì§Ïóê Î∞òÎåÄ Î∂ÄÌò∏Î•º Î∂ÄÏó¨ (1 - -1)
    <ul>
      <li>ÎßåÏïΩ Ïù∏Ï†ë ÎÖ∏ÎìúÍ∞Ä ÏûêÏã†Í≥º Í∞ôÏùÄ Î∂ÄÌò∏Î•º Í∞ÄÏßÄÍ≥† ÏûàÏùÑ Ïãú Ïù¥Î∂Ñ Í∑∏ÎûòÌîÑ Î∂àÍ∞Ä</li>
    </ul>
  </li>
</ul>

<h2 id="Ï∂îÍ∞Ä-ÏÇ¨Ìï≠"><strong>Ï∂îÍ∞Ä ÏÇ¨Ìï≠</strong></h2>

<ul>
  <li>Î™ª Ìëº Ïù¥Ïú†
    <ul>
      <li>ifÎ¨∏Ïùò Ï†úÏñ¥ Ïã§Ìå®</li>
      <li>Ïûò Î™®Î•¥Í≤†Ïùå</li>
      <li>Î∂ÄÌò∏Î•º Î∞òÎåÄÎ°ú Ìï†ÎïåÎäî -1ÏùÑ Í≥±ÌïòÏûê -index ÌïòÏßÄ ÎßêÍ≥†</li>
      <li>Î∞©Î¨∏ ÌïòÏßÄ ÏïäÏùÄ ÎÖ∏ÎìúÎ•º ÏßÄÎÇ†ÎïåÎßå index Î∂ÄÌò∏Í∞Ä Î∞îÎÄåÏñ¥Ïïº ÌñàÏùå</li>
    </ul>
  </li>
</ul>
:ET