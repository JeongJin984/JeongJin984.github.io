I"E<h1 id="computer-architecure-1">Computer Architecure 1</h1>
<hr />

<h2 id="-하드웨어">💿 <strong>하드웨어</strong></h2>

<blockquote>
  <p>컴퓨터를 구성하는 기계적 장치</p>
</blockquote>

<h3 id="구성"><strong>구성</strong></h3>

<ul>
  <li>CPU(중앙 처리 장치)</li>
  <li>기억장치: RAM, HDD</li>
  <li>입출력 장치: 마우스 프린터</li>
</ul>

<p>위의 것들은 시스템 버스로 연결되어 있으며 시스템 버스는 데이터와 명령어, 제어신호를 각 장치로 실어나르는 역할을 한다.
___</p>

<h2 id="-소프트웨어">💿 <strong>소프트웨어</strong></h2>

<blockquote>
  <p>하드웨어의 동작을 지시하고 제어하는 명령어 집합</p>
</blockquote>

<ul>
  <li>시스템 소프트웨어: 운영체제, 컴파일러</li>
  <li>응용 소프트웨어: 워드 프로세서, 게임 등등
___</li>
</ul>

<h2 id="-고정-소수점--부동-소수점">💿 <strong>고정 소수점 &amp; 부동 소수점</strong></h2>

<blockquote>
  <p>컴퓨터의 실수를 표현하는 방법</p>
</blockquote>

<h3 id="고정-소수점"><strong>고정 소수점</strong></h3>

<p><img src="https://camo.githubusercontent.com/b7a7af7955adb8853339605f8e38fdaf5bb0983fd884607f3c5b4f92837b7390/687474703a2f2f7463707363686f6f6c2e636f6d2f6c656374757265732f696d675f635f66697865645f706f696e742e706e67" alt="image" /></p>

<blockquote>
  <p>소수점이 찍힐 위치를 미리 정해놓고 소수를 표현하는 방식(정수 + 소수)</p>
</blockquote>

<ul>
  <li>장점: 실수를 정수부와 소수부로 표현하여 단순하다.</li>
  <li>단점: 표현의 범위가 너무 적어서 활용하기 힘들다(정수부는 15bit, 소수부는 16bit)</li>
</ul>

<h3 id="부동-소수점"><strong>부동 소수점</strong></h3>

<p><img src="https://camo.githubusercontent.com/3f982c8c64e1f5bf0837e08593c05b45dfce1c9a2bf53fc31e2cbec3d2caf9ea/687474703a2f2f7463707363686f6f6c2e636f6d2f6c656374757265732f696d675f635f666c6f6174696e675f706f696e745f33322e706e67" alt="image" /></p>

<blockquote>
  <p>실수부를 가수부 + 지수부로 표현, 즉 지수의 값에 따라 소수점이 움직이는 방식을 활용한 실수 표현 방법이다.</p>
  <ul>
    <li>가수: 실수의 실제값</li>
    <li>지수: 크기를 표현. 가수의 어디쯤에 소수점이 있는지 나타냄</li>
  </ul>
</blockquote>

<ul>
  <li>장점 : 표현할 수 있는 수의 범위가 넓어진다. (현재 대부분 시스템에서 활용 중)</li>
  <li>단점 : 오차가 발생할 수 있다. (부동소수점으로 표현할 수 있는 방법이 매우 다양함)</li>
</ul>

<hr />

<h2 id="-패리티-비트--해밍-코드">💿 <strong>패리티 비트 &amp; 해밍 코드</strong></h2>

<blockquote>
  <p>패리티 비트: 정보 전달 과정에서 오류가 생겼는 지 위해 추가하는 비트(전송하고자 하는 데이터의 각 문자에 1비트를 더하여 전송한다.)</p>
</blockquote>

<p>종류: 짝수, 홀수
전체 비트에서 1의 개수가 (짝수, 홀수)에 맞도록 비트를 정하는 것</p>

<blockquote>
  <p>해밍 코드: 데이터 전송 시 1비트의 에러를 정정할 수 있는 자기 오류 정정 코드, 패리티 비트를 보고, 1비트에 대한 오류를 정정할 곳을 찾아 수정 가능(패리티 비트는 오류를 검출하기만 할 뿐 수정하지는 않는다.)</p>
</blockquote>

<p><strong>ex) 짝수 패리티의 해밍 코드가 0011011일때 오류가 수정된 코드는?</strong></p>

<p>1, 3, 5, 7번째 비트 확인 : 0101로 짝수이므로 ‘0’</p>

<p>2, 3, 6, 7번째 비트 확인 : 0111로 홀수이므로 ‘1’</p>

<p>4, 5, 6, 7번째 비트 확인 : 1011로 홀수이므로 ‘1’</p>

<p>역순으로 패리티비트 ‘110’을 도출했다. 10진법으로 바꾸면 ‘6’으로, 6번째 비트를 수정하면 된다.</p>

<p>따라서 정답은 00110’0’1이다.
___</p>

<h2 id="-arm-프로세서">💿 <strong>ARM 프로세서</strong></h2>

<blockquote>
  <p>프로세서: 메모리에 저장된 명령어들을 실행하는 유한 상태 오토마톤</p>
</blockquote>

<blockquote>
  <p>ARM(advanced RISC MACHINE): 진보된 RISC 기기, RISC(Reduced Instruction Computing)의 약자로 단순한 명령 집합을 가진 프로세서가 복잡한 명령 집합을 가진 프로세서 보다 훨씬 효율 적이다 라는 가정하에 탄생한 기기</p>
</blockquote>

<h2 id="구조"><strong>구조</strong></h2>

<p><img src="https://camo.githubusercontent.com/566b26ea8deb53645b0f78a525c81864b78fe7abf0d5bb627a74000132149ca6/68747470733a2f2f74312e6461756d63646e2e6e65742f6366696c652f746973746f72792f323537383843333535304341463837333141" alt="image" /></p>

<p>ARM은 칩의 기본 설계 구조만 만들고, 실제 기능 추가와 최적화 부분은 개별 반도체 제조사의 영역으로 맡긴다. 따라서 물리적 설계는 같아도, 명령 집합이 모두 다르기 떄문에 서로 다른 칩이 되기도 하는 것이 ARM.</p>

<p>소비자에게는 칩이 논리적 구조인 명령 집합으로 구성되면서, 이런 특성 때문에 물리적 설계 베이스는 같지만 용도에 따라 다양한 제품군을 만날 수 있는 특징이 있다.</p>

<p>아무래도 ARM은 RISC 설계 기반으로 “단순한 명령 집합을 가진 프로세서가 복잡한 것 보다 효율적”임을 기반하기 때문에 명령 집합과 구조 자체가 단순하다. 따라서 ARM 기반 프로세서가 더 작고, 효율적이며 상대적으로 느린것이다.</p>

<p>단순한 명령 집합은 적은 수의 트랜지스터만 필요하므로 간결한 설계와 더 작은 크기를 가능케 한다. 반도체 기본 부품인 트랜지스터는 전원을 소비해 다이의 크기를 증가시키기 때문에 스마트폰이나 태블릿PC를 위한 프로세서에는 가능한 적은 트랜지스터를 가진 것이 이상적이다.</p>

<p>따라서 명령 집합의 수가 적기 때문에 트랜지스터의 수가 적고 이를 통해 크기가 작고 전원 소모가 낮은 CPU가 스마트폰, 태블릿PC와 같은 모바일 기기에 많이 사용되고 있다.</p>

<h2 id="장점"><strong>장점</strong></h2>

<p>소비자에 있어 ARM은 하나의 생태계이다. ARM을 통해 개발된 프로그램은 오직  ARM 프로세서가 탑재된 기기에서만 실행할 수 있다.(즉 x86 CPU 프로세서 기반 프로그램은 ARM 기기에서 실행 될 수 없음)</p>

<p>따라서 ARM에서 실행되던 프로그램을 x86 프로세서에서 실행되도록 하려면 프로그램에 수정이 가해져야만 한다.</p>

<p>하지만 하나의 ARM 기기에 동작하는 OS는 다른 ARM 기반 기기에서도 잘 동작한다. 이러한 장점 때문에 수많은 버전의 안드로이드가 탄생하고 있으며 또한 HP나 블랙베리 태블릿에도 안드로이드가 탑재될 숭 있는 가능성이 생기게 된 것이다.
(하지만 애플사는 IOS 소스코드를 공개하지 않고 있기 때문에 애플 기기는 불가능하다.)</p>

<p>ARM을 만드는 기업들은 전력 소모를 줄이고 성능을 높이기 위해 설계를 개선하며 노력하고 있다.</p>
:ET