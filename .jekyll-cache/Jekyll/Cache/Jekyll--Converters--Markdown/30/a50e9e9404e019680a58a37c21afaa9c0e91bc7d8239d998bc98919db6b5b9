I"f<<h1 id="two-dot"><strong>Two Dot</strong></h1>
<hr />
<h2 id="코드"><strong>코드</strong></h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>

    <span class="nc">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">visited</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">di</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dj</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>

    <span class="kd">static</span> <span class="kt">char</span> <span class="n">ch</span><span class="o">;</span>

    <span class="kd">static</span> <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">"No"</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="nc">Point</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">cur</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">cur</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">depth</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">4</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Point</span> <span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">i</span> <span class="o">+</span> <span class="n">di</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">cur</span><span class="o">.</span><span class="na">j</span> <span class="o">+</span> <span class="n">dj</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">&lt;</span><span class="n">height</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">&lt;</span><span class="n">width</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">ch</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">depth</span> <span class="o">-</span> <span class="n">visited</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">visited</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="s">"Yes"</span><span class="o">;</span>
                        <span class="k">return</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">visited</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">next</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="no">DFS</span><span class="o">(</span><span class="n">next</span><span class="o">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>

                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// write your code here</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="n">height</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">width</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">];</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">height</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">width</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">height</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">width</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">ch</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                <span class="no">DFS</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">),</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"Yes"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"No"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h2 id="문제"><strong>문제</strong></h2>

<p>각각의 칸은 색이 칠해진 공이 하나씩 있다. 이 게임의 핵심은 같은 색으로 이루어진 사이클을 찾는 것이다.
다음은 위의 게임판에서 만들 수 있는 사이클의 예시이다.</p>

<p><img src="https://upload.acmicpc.net/33712230-43d5-45f7-8b2d-dcb21b9c602c/-/preview/" alt="image" /></p>

<p>점 k개 d1, d2, …, dk로 이루어진 사이클의 정의는 아래와 같다.</p>

<ul>
  <li>모든 k개의 점은 서로 다르다.</li>
  <li>k는 4보다 크거나 같다.</li>
  <li>모든 점의 색은 같다.</li>
  <li>모든 1 ≤ i ≤ k-1에 대해서, di와 di+1은 인접하다. 또, dk와 d1도 인접해야 한다. 두 점이 인접하다는 것은 각각의 점이 들어있는 칸이 변을 공유한다는 의미이다.</li>
</ul>

<p>게임판의 상태가 주어졌을 때, 사이클이 존재하는지 아닌지 구해보자.</p>

<h2 id="입력"><strong>입력</strong></h2>

<p>첫째 줄에 게임판의 크기 N, M이 주어진다. 둘째 줄부터 N개의 줄에 게임판의 상태가 주어진다. 게임판은 모두 점으로 가득차 있고, 게임판의 상태는 점의 색을 의미한다. 점의 색은 알파벳 대문자 한 글자이다.</p>

<h2 id="출력"><strong>출력</strong></h2>

<p>사이클이 존재하는 경우에는 “Yes”, 없는 경우에는 “No”를 출력한다.</p>

<h2 id="예시"><strong>예시</strong></h2>

<ul>
  <li>입력</li>
</ul>

<pre>
    3 4
    AAAA
    ABCA
    AAAA
</pre>

<p>-출력</p>

<pre>
    Yes
</pre>

<h2 id="기본-컨셉"><strong>기본 컨셉</strong></h2>

<blockquote>
  <p>기본적인 인접행렬에서의 DFS</p>
</blockquote>

<ul>
  <li>DFS를 진행하면서 다음 Depth에 방문할때 에 (전의 depth에 있던 노드 의 수) + 1을 하며 진행한다.
    <ul>
      <li><strong>방문 한 노드</strong> 중 색깔이 같고 Depth가 3 이상 차이가 나는 노드가 다음 노드에 있을 때(이미 방문 했더라도) 사이클이 존재</li>
    </ul>
  </li>
</ul>
:ET