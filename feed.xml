<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jeongjin984.github.io/</id><title>Jiny</title><subtitle>Jiny's Note</subtitle> <updated>2022-03-21T21:34:26+09:00</updated> <author> <name>Nam Jeong Jin</name> <uri>https://jeongjin984.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jeongjin984.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://jeongjin984.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 Nam Jeong Jin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>OSI Layer</title><link href="https://jeongjin984.github.io/posts/OSI-Layer/" rel="alternate" type="text/html" title="OSI Layer" /><published>2022-01-03T14:09:00+09:00</published> <updated>2022-01-03T21:28:50+09:00</updated> <id>https://jeongjin984.github.io/posts/OSI-Layer/</id> <content src="https://jeongjin984.github.io/posts/OSI-Layer/" /> <author> <name>Jiny</name> </author> <category term="Network" /> <category term="OSI" /> <summary> OSI Layer 💿 Physical Layer(물리 계층) 주로 전기적, 기계적, 기능적인 특성을 이용해서 통신 케이블로 데이터를 전송 통신단위는 비트이다. 데이터를 전달할 뿐 아니라 전송하려는 데이터가 무엇인지, 어떤 에러가 있는지 등에는 전혀 신경쓰지 않는다. 이 계층에 속하는 대표적인 장비는 통신 케이블, 리피터, 허브등이 있다. 💿 DataLink Layer(데이터 링크계층) 물리 계층을 통해 송수신되는 정보의 오류와 흐름을 관리하여 안전한 정보의 전달을 수행할 수 있도록 도와주는 역할 통신에서의 오류도 찾고 재전송도 하는 기능 이 계층은 주로 맥 주소를 가지고 통신 대표적인 장비로는 브리지, 스위치 등이 있다.(MAC 주소 사용) 즉 브... </summary> </entry> <entry><title>Network Equipment</title><link href="https://jeongjin984.github.io/posts/Network-Equipment/" rel="alternate" type="text/html" title="Network Equipment" /><published>2022-01-03T14:09:00+09:00</published> <updated>2022-01-03T14:09:00+09:00</updated> <id>https://jeongjin984.github.io/posts/Network-Equipment/</id> <content src="https://jeongjin984.github.io/posts/Network-Equipment/" /> <author> <name>Jiny</name> </author> <category term="Network" /> <category term="OSI" /> <summary> Network Equipment 💿 네트워크 분류 규모 LAN : 가까운 지역간의 네트워크 Hub, Bridge, Wifi 등으로 구성된 WAN : LAN, LAN을 묶어 나타난 네트워크 Router로 구성 MAN : 기타(VLAN, CAN, PAN) 개념 Internet: 수많은 LAN과 WAN등이 연결된 거대한 네트워크 모든 사람이 이용 가능한 네트워크 Intranet: Internet의 기술을 기업내의 정보통신 시스템의 기반으로 적용시켜, 정보공유나 업무자원에 활용키 위한 시스템의 한 형태 특정한 조직에서 사용하기 위한 내부 업무용 네트워크... </summary> </entry> <entry><title>Spring Batch 2</title><link href="https://jeongjin984.github.io/posts/Spring-Batch-2/" rel="alternate" type="text/html" title="Spring Batch 2" /><published>2021-12-06T14:09:00+09:00</published> <updated>2021-12-06T14:09:00+09:00</updated> <id>https://jeongjin984.github.io/posts/Spring-Batch-2/</id> <content src="https://jeongjin984.github.io/posts/Spring-Batch-2/" /> <author> <name>Jiny</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Spring Batch 2 💿 배치 초기화 설정 JobLauncherApplication Spring Batch 작업을 시작하는 ApplicationRunner로서 BatchAutoConfiguraion에서 생성됨 Spring Boot에서 제공하는 ApplicationRunner의 구현체로 App이 정상적으로 구동되자 마자 실행됨 기본적으로 빈으로 등록된 모든 job을 실행시킨다. BatchProperties Spring Batch의 환경 설정 클래스 Job 이름, 스키마 초기화 설정, 테이블 Prefix 등의 값을 설정할 수 있다. application.properties or application.yml 파일에 설정함 batch: job: name... </summary> </entry> <entry><title>Spring Batch 1</title><link href="https://jeongjin984.github.io/posts/Spring-Batch-1/" rel="alternate" type="text/html" title="Spring Batch 1" /><published>2021-12-06T14:09:00+09:00</published> <updated>2021-12-06T14:09:00+09:00</updated> <id>https://jeongjin984.github.io/posts/Spring-Batch-1/</id> <content src="https://jeongjin984.github.io/posts/Spring-Batch-1/" /> <author> <name>Jiny</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Spring Batch 1 💿 DB Schema Job 관련 테이블 BATCH_JOB_INSTANCE Job이 실행될 때 JobInstance 정보가 저장되며 job_name과 Job_key을 키로 하여 하나의 데이터가 저장 동일한 job_name 과 job_key로 중복 저장될 수 없다. BATCH_JOB_EXECUTION job의 실행정보가 저장되며 Job 생성, 시작, 종료시간, 실행상태, 메시지 등을 관리 BATCH_JOB_EXECUTION_PARAMS Job과 함께 실행되는 JobParameter 정보를 저장 BATCH_JOB_EXECUTION_C... </summary> </entry> <entry><title>Spring AOP</title><link href="https://jeongjin984.github.io/posts/Spring-AOP/" rel="alternate" type="text/html" title="Spring AOP" /><published>2021-11-25T14:09:00+09:00</published> <updated>2021-11-25T14:09:00+09:00</updated> <id>https://jeongjin984.github.io/posts/Spring-AOP/</id> <content src="https://jeongjin984.github.io/posts/Spring-AOP/" /> <author> <name>Jiny</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Spring AOP 💿 프록시, 프록시 패턴 주요 기능 접근 제어 권한에 따른 접근 차단 캐싱 지연 로딩 부가 기능 추가 원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다. 예) 요청 값이나, 응답 값을 중간에 반영한다. 예) 실행 시간을 측정해서 추가 로그를 남긴다. 데코레이터 패턴과 차이 둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라서 나눈다. 프록시: 접근 제어가 목적 데코레이터: 새로운 기능 추가 @Slf4j public class CacheP... </summary> </entry> </feed>
