[ { "title": "OSI Layer", "url": "/posts/OSI-Layer/", "categories": "Network, OSI", "tags": "network, osi", "date": "2022-01-03 14:09:00 +0900", "snippet": "OSI Layer💿 Physical Layer(물리 계층) 주로 전기적, 기계적, 기능적인 특성을 이용해서 통신 케이블로 데이터를 전송 통신단위는 비트이다. 데이터를 전달할 뿐 아니라 전송하려는 데이터가 무엇인지, 어떤 에러가 있는지 등에는 전혀 신경쓰지 않는다. 이 계층에 속하는 대표적인 장비는 통신 케이블, 리피터, 허브등이 있다.💿 DataLink Layer(데이터 링크계층) 물리 계층을 통해 송수신되는 정보의 오류와 흐름을 관리하여 안전한 정보의 전달을 수행할 수 있도록 도와주는 역할 통신에서의 오류도 찾고 ..." }, { "title": "Network Equipment", "url": "/posts/Network-Equipment/", "categories": "Network, OSI", "tags": "network, osi", "date": "2022-01-03 14:09:00 +0900", "snippet": "Network Equipment💿 네트워크 분류규모 LAN : 가까운 지역간의 네트워크 Hub, Bridge, Wifi 등으로 구성된 WAN : LAN, LAN을 묶어 나타난 네트워크 Router로 구성 MAN : 기타(VLAN, CAN, PAN)개념 Internet: 수많은 LAN과 WAN등이 연결된 거대한 네트워크 모든 사람이 이용 가능한 네트워크 Intranet: Internet의 기술을 기업내의 정보통신 시스템의 기반으로 적용시켜..." }, { "title": "Spring Batch 2", "url": "/posts/Spring-Batch-2/", "categories": "Java, Spring", "tags": "java, spring, aop", "date": "2021-12-06 14:09:00 +0900", "snippet": "Spring Batch 2💿 배치 초기화 설정JobLauncherApplication Spring Batch 작업을 시작하는 ApplicationRunner로서 BatchAutoConfiguraion에서 생성됨 Spring Boot에서 제공하는 ApplicationRunner의 구현체로 App이 정상적으로 구동되자 마자 실행됨 기본적으로 빈으로 등록된 모든 job을 실행시킨다.BatchProperties Spring Batch의 환경 설정 클래스 Job 이름, 스키마 초기화 설정, 테이블 Prefix 등의 값을 설정할..." }, { "title": "Spring Batch 1", "url": "/posts/Spring-Batch-1/", "categories": "Java, Spring", "tags": "java, spring, aop", "date": "2021-12-06 14:09:00 +0900", "snippet": "Spring Batch 1💿 DB SchemaJob 관련 테이블 BATCH_JOB_INSTANCE Job이 실행될 때 JobInstance 정보가 저장되며 job_name과 Job_key을 키로 하여 하나의 데이터가 저장 동일한 job_name 과 job_key로 중복 저장될 수 없다. BATCH_JOB_EXECUTION job의 실행정보가 저장되며 Job 생성, 시작, 종료시간, 실행상태, 메시지 등을 관리 BATCH_JOB_EXECUTION_PA..." }, { "title": "Spring AOP", "url": "/posts/Spring-AOP/", "categories": "Java, Spring", "tags": "java, spring, aop", "date": "2021-11-25 14:09:00 +0900", "snippet": "Spring AOP💿 프록시, 프록시 패턴주요 기능 접근 제어 권한에 따른 접근 차단 캐싱 지연 로딩 부가 기능 추가 원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다. 예) 요청 값이나, 응답 값을 중간에 반영한다. 예) 실행 시간을 측정해서 추가 로그를 남긴다. 데코레이터 패턴과 차이 둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라서 나눈다. 프록시: 접근 제어가..." }, { "title": "Golang Slice", "url": "/posts/tls/", "categories": "Network, TLS", "tags": "tls, ssl, network", "date": "2021-09-03 13:40:00 +0900", "snippet": "SSL / TLS💿 SSL / TLS SSL: Secure Sockets Layer(Netscape사에서 개발) TLS: Transport Layer Security💿 Certificate 보장 먼저 서버측에 인증서가 필요함 이 인증서 발급을 위해서 key(공개키, 개인키)를 만들어야 함 공개키(csr)를 CA기관에 보내면 공개키와 인증서(crt)를 묶어서 보내줌 Client가 서버 접속시 인증서를 요구 Server가 인증..." }, { "title": "Golang Slice", "url": "/posts/Golang-Slice/", "categories": "Lang, Go", "tags": "go, golang, slice", "date": "2021-09-02 13:40:00 +0900", "snippet": "Slice💿 Array An array type definition specifies a length and an element type. Go’s arrays are values. it is not a pointer to the first array element (as would be the case in C). This means that when you assign or pass around an array value you will make a copy of its contents. ..." }, { "title": "Prometheus 1", "url": "/posts/Prometheus-1/", "categories": "Metric, Prometheus", "tags": "metric, prometheus, monitoring", "date": "2021-09-01 21:30:00 +0900", "snippet": "Prometheus💿 Node Exporter 주로 운영 시스템 커널에서 오는 머신 수준의 메트릭을 게시한다. 즉 머신 자체를 모니터링하기 위한 것CPU 수집기 주요 메트릭: node_cpu_seconds_total: 각 모드에서 CPU마다 얼마나 많은 시간을 소비했는지 나타내는 카운터 레이블: cpu, mode avg without(cpu, mode)(rate(node_cpu_seconds_total{mode=”idle”}[1m]) CPU마다 초당 유휴 시간을 계산한 다음 머..." }, { "title": "Prometheus 0", "url": "/posts/Prometheus-0/", "categories": "Metric, Prometheus", "tags": "metric, prometheus, monitoring", "date": "2021-08-31 17:30:00 +0900", "snippet": "Prometheus💿 Prometheus 메트릭 기반의 오픈소스 모니터링 시스템 PromQL 기반의 단순하면서 강력한 데이터 모델Monitoring(모니터링)종류 알림(alerting): 문제가 발생한 시기나 시점을 파악 디버깅(Debugging): 문제의 근본 원인을 규명, 해결 추세파악(trending): 긴급하지 않은 문제인 경우에는 시스템이 어떻게 사용되고 시간에 따라 변화하는지도 확인 알림과 디버깅은 보통 몇 분부터 몇 시간까지 시간 단위로 발생하기 때문 플러밍(Plumbing):..." }, { "title": "Elasticsearch 1", "url": "/posts/ElasticSearch-1/", "categories": "ElasticSearch", "tags": "elasticsearch, bigdata, elk", "date": "2021-08-31 15:30:00 +0900", "snippet": "Elasticsearch 1💿 환경설정방법 elasticsearch.in.sh, elasticsearch.yml의 파일을 변경 es실행 시 -D* 또는 –*옵션을 이용 es 실행 후 REST API를 이용yml 클러스터 별도로 설정하지 않으면 클러스터 명은 elasticsearch로 설정 노드 es는 하나 이상의 노드로 구성된다. 실행된 하나의 es 프로세스를 한 노드라고 하고 각 노드가 연결된 전체 시스템을 elasticsearch cluste..." }, { "title": "Elasticsearch 0", "url": "/posts/ElasticSearch-0/", "categories": "ElasticSearch", "tags": "elasticsearch, bigdata, elk", "date": "2021-08-30 15:30:00 +0900", "snippet": "Elasticsearch 0💿 개념 아파치 루씬(Lucene) 기반의 오픈소스 실시간 분산 검색 엔진으로 JSON 기반의 비정형 데이터 분산 검색 및 분석을 지원한다. 설치와 서버 확장이 매우 편리 실시간 검색 서비스 지원, 분산 및 병렬 처리, 그리고 멀티테넌시 기능 제공 현재 웹 문서 검색, 소셜 데이터 분석, 쇼핑몰 등에 활용되고 있음 빅데이터 분석/처리 MSA 환경의 로그 모니터링등에 활용💿 특징분산/확장성/병렬처리Elasticsearch 구성 시 보통 3개 이상의 노드(Elasticsearch 서버)를 클러스..." }, { "title": "Kubernetes network 2", "url": "/posts/Kubernetes-network-2/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-07-27 15:30:00 +0900", "snippet": "Kubernetes network 2💿 라우팅 &amp;amp; 로드 밸런싱네트워크의 traffic은 기본적으로 연결(connections) 과 요청(request)로 이루어져 있다. 이러한 traffic은 osi 4(tcp)나 osi 7(http, rpc, etc)에서 동작한다. netfilter의 Routing Rule은 IP Packet 레벨인 layer 3에서 동작한다.(netfilter를 포함한 모든 라우터는 라우팅 결정을 IP Packet을 기준으로 하므로)내부에서 외부로 가는 패킷과 외부에서 내부로 오는 패킷은 똑..." }, { "title": "Kubernetes network 1", "url": "/posts/Kubernetes-network-1/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-07-27 13:30:00 +0900", "snippet": "Kubernetes network 1💿 kubernetes** Docker A pod consists of one or more containers that are collocated on the same host, and are configured to share a network stack and other resources such as volumes.여기서 중요한 점은 네트워크와 볼륨과 같은 특정 리소스를 공유한다는 것이다. 그렇다면 네트워크를 공유한다는 것은 무엇을 의미할까도커의 경우 docker0라는 veth0(1..." }, { "title": "Kubernetes 4", "url": "/posts/Kubernetes-4/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-07-26 13:30:00 +0900", "snippet": "Kubernetes 4💿 포드의 문제점 포드는 일시적으로 생성한 컨테이너 집합 때문에 포드가 지속적으로 생겨났을 때 서비스를 하기에 적합하지 않음 IP 주소의 지속적인 변동, 로드밸런생을 관리해줄 또 다른 객체가 필요 이 문제를 해결하기 위해서 서비스라는 리소스가 존재서비스 서비스의 세션 고정 서비스가 다수의 포드로 구성하면 웹서비스의 세션이 유지되지 않음 이를 위해 처음 들어왔던 클라이언트 IP를 그대로 유지해주는 방법이 필요 sessionAffinity: ..." }, { "title": "Kubernetes 3", "url": "/posts/Kubernetes-3/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-07-25 16:30:00 +0900", "snippet": "Kubernetes 3💿 Deployment 어플리케이션을 다운 타임없이 업데이트 가능하도록 도와주는 리소스 레플리카 셋과 레플리케이션 컨트롤러 상위에 배포되는 리소스 모든 포드를 업데이트하는 방법 잠깐의 다운 타임 발생(새로운 포드를 생성시키고 작업이 완료되면 오래된 포드를 삭제) 롤링 업데이트 롤링 업데이트 기존의 모든 포드를 삭제 후 새로운 포드 생성 잠깐의 다운 타임 발생 새로운 포드를 실행시키고 작업이 완료되면 오래된 포드를 삭제 ..." }, { "title": "Kubernetes 2", "url": "/posts/Kubernetes-2/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-07-25 15:30:00 +0900", "snippet": "Kubernetes 2💿 Liveness, Readiness, Startup ProbesLiveness Probes 컨테이너가 살아있는지 판단하고 다시 시작하는 기능 컨테이너의 상태를 스스로 판단하여 교착 상태에 빠진 컨테이너를 재시작 버그가 생겨도 높은 가용성을 보임Readiness Probes 포드가 준비된 상태에 있는지 확인하고 정상 서비스를 시작하는 기능 포드가 적절하게 준비되지 않은 경우 로드밸런싱을 하지 않음Startup Probes 애플리케이션 시작 시기를 확인하여 가용성을 높이는 기능 Liveness..." }, { "title": "Spring Web MVC 3", "url": "/posts/Spring-Web-MVC-3/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2021-07-19 17:30:00 +0900", "snippet": "Spring Web MVC 3💿 Application Context 과 Servlet ContextApplication Context Web Application 최상단에 위치하고 있는 Context Spring에서 ApplicationContext란 BeanFactory를 상속받고 있는 Context Spring에서 root-context.xml, applicationContext.xml 파일은 ApplicationContext 생성 시 필요한 설정정보를 담은 파일 (Bean 선언 등..) Spring에서 생성되는 B..." }, { "title": "JVM Tunning 2", "url": "/posts/JVM-Tunning-2/", "categories": "Java, JVM", "tags": "java, java, troubleshooting", "date": "2021-07-03 17:30:00 +0900", "snippet": "JVM Tunning 2💿 IBM JVMoptthruput GC 옵션 -Xgcpolicy: optthuput 설명 default GC 알고리즘. mark-sweep-compact 단계를 수행하여 STW로 일시정지됨. application이 복잡해지고 그에 따라 heap이 커지면 GC 수행에 따른 멈춤시간도 증가 장점 Throughput이 향상 단점 STW로 인한 Response Time 감소 opt..." }, { "title": "JVM Tunning 1", "url": "/posts/JVM-Tunning-1/", "categories": "Java, JVM", "tags": "java, java, troubleshooting", "date": "2021-07-03 15:30:00 +0900", "snippet": "JVM Tunning 1💿 GC GC(Garbage Collection): 더이상 사용하지 않는 객체 등을 메모리에서 해제(삭제)하는 JVM의 작업JVMJVM Heap 메모리 구조Java에서 GC를 도입이 가능했던 이유 weak generational hypothesis 가설로 인해 GC 도입이 가능해짐 대부분의 객체는 금방 접근 불가능 상태(unreachable)가 됨 오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재 JVM 에서는 오래된 객체를 구별하기 위해 메모리를 여러 영역으로 나눔" }, { "title": "Kubernetes 1", "url": "/posts/Kubernetes-1/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-06-27 15:30:00 +0900", "snippet": "Kubernetes 1💿 컨트롤 플레인(마스터)https://startkubernetes.com/blog/k8s_master_and_worker_nodeskube-api-server 쿠버네티스 시스템 컴포넌트는 오직 API 서버와 통신 컴포넌트끼리 서로 직접 통신X 때문에 etcd와 통신하는 유일한 컴포넌트 API 서버 Restful API를 통해 클러스터 상태를 쿼리, 수정할 수 있는 기능을 제공구체적 역할 인증 플러그인을 사용한 클라이언트 인증 권한 승인 플러그인을 통한 클라이언트 인증 승인 제어 플러그인을 통..." }, { "title": "Kubernetes 0", "url": "/posts/Kubernetes-0/", "categories": "Infra, Kubernetes", "tags": "k8s, kubernetes, infra", "date": "2021-06-26 15:30:00 +0900", "snippet": "Kubernetes 0💿 도커 컨테이너와 가상머신 가상머신: 운영체제 위헤 하드웨어를 에뮬레이션하고 그 위에 운영체제를 올리고 프로세스를 실행 컨테이너: 하드웨어 에뮬레이션 없이 리눅스 커널을 공유해서 바로 프로세스를 실행$ docker versionClient: Docker Engine - Community Version: 19.03.5 ...$ docker run -it ubuntu:latest bashroot@bfccfb4136ae:/# uname -aLinux f44e33a332f2 4.15.0-..." }, { "title": "Programming Skills 2", "url": "/posts/Programming-Skills-Web-Flow/", "categories": "Backend, Basics", "tags": "web, backend", "date": "2021-06-13 15:30:00 +0900", "snippet": "Programming Skills 2💿 Serverless Baas 와 Faas에 의존하는 아키텍처를 Serverless()Bass: 자주 필요한 사용자 관리 및 접속 제어, 푸시 알림, 데이터 저장, 누리 소통망 서비스(SNS), 위치 서비스 등의 백엔드 기능을 구현하기 위해 코드를 직접 개발해야 한다. 그러나 서비스형 백엔드(BaaS)를 이용하면, 직접 코드를 개발하지 않고 앱을 클라우드와 연동시켜 BaaS에서 제공하는 응용 프로그램 인터페이스(API: Application Program Interface)를 호출하여 사..." }, { "title": "Programming Skills 1", "url": "/posts/Programming-Skills-basic/", "categories": "Backend, Basics", "tags": "backend, web", "date": "2021-06-12 15:30:00 +0900", "snippet": "Programming Skills 1💿 BackEnd일의 범위 사용자에게 보이는 웹 어플리케이션 개발뿐만 아니라 데이터 분석을 위한 엔지니어링, 분산시스템이나 DBMS와 같은 제품을 만드는 개발자들도 백엔드에 속함 그 대상이나 하는 일이 상대적으로 모호 서버관리 DB관리 프런트엔드 개발까지도 담당 백엔드 개발자는 폭넓은 기술을 접할 수 있는 역할을 수행 대용량 데이터 분석 모니터링, 관리 도구 등등 보람과 고충 보람 ..." }, { "title": "Kafka Api", "url": "/posts/Kafka-Api/", "categories": "DataEngineering, Kafka", "tags": "kafka, data", "date": "2021-06-08 15:30:00 +0900", "snippet": "Kafka API💿 Kafka APIKafka API Kafka Producer API: directly producing data Kafka Connect Source API: bridging between a datastores we don’t control and kafka KafkaStreams API/KSQL: App wanting to consume from Kafka and produce back into Kafka, also called stream processing Use KSQL can..." }, { "title": "Apache Kafka 2", "url": "/posts/Apache-Kafka-2/", "categories": "DataEngineering, Kafka", "tags": "kafka, data", "date": "2021-06-08 15:30:00 +0900", "snippet": "Apache Kafka 2💿 브로커, 클러스터, 주키퍼브로커 클라이언트와 데이터를 주고받기 위해 사용하는 주체이자, 데이터를 분산 저장하여 장애가 발생하더라도 안전하게 사용할 수 있도록 도와주는 App 데이터 저장, 전송: 프로듀서로 부터 전달된 데이터는 파일 시스템에 저장 되며 컨슈머가 데이터를 요청하면 파티션에 저장된 저장된 데이터를 전달한다. 페이지 캐시 영역에 저장하기 때문에 파일 입출력의 속도 문제를 최소화 데이터 복제, 싱크: 복제는 카프카를 장애 허용 시스템(fault toleran..." }, { "title": "Apache Kafka 1", "url": "/posts/Apache-Kafka-1/", "categories": "DataEngineering, Kafka", "tags": "kafka, data", "date": "2021-06-08 15:30:00 +0900", "snippet": "Apache Kafka 1💿 카프카의 탄생아키텍쳐가 거대해지고 소스 애플리케이션과 타깃 App의 개수가 점점 많아지면서 서로를 연결하는 파이프라인의 개수가 많아 졌다. 그러ㅕ면서 소스코드 및 버전 관리에서 이슈가 생겼다 그리고 타깃 App에 장애가 상길 경우 그 영향이 소스 App에 그대로 전달되었다.즉 파편화된 데이터 파이프라인은 치명적이었다. 링크드인 데이터 팀은 신규 시스템을 만들어 데이터 파이프라인의 복잡도를 낮추기로 했고 그렇게 개발된 카프카를 통해 여러 Web, App, Sensor등에서 취합한 데이터 스트림을 한 ..." }, { "title": "Data Engineering Kafka", "url": "/posts/Data-Engineering-Kafka/", "categories": "DataEngineering, Kafka", "tags": "kafka, data", "date": "2021-06-08 15:30:00 +0900", "snippet": "Data Engineering Kafka Pub-Sub 모델의 메시지 큐 분산환경에 특화💿 구성Event Producer와 Consumer가 데이터를 주고 받는 단위Producer 데이터를 발생시키고 카프카 클러스터(Kafka Cluster)에 적재하는 프로세스Kafka Cluster 카프카 서버로 이루어진 클러스터 브로커: 카프카 서버 주키퍼(zookeeper): 분산 코디네이션 시스템. 카프카 브로커를 하나의 클러스터로 코디네이팅하는 역할을 하며 리더 파티션을 발탁하는 방식도 주키퍼가 제공하는 제공을 이용 토..." }, { "title": "SIY Spring Cloud Feign", "url": "/posts/SIY-Spring-Cloud-Feign/", "categories": "Spring, Cloud", "tags": "spring, cloud, siy, feign", "date": "2021-06-08 14:30:00 +0900", "snippet": "SIY Spring Cloud Feign(RabbitMQ)💿 구성 FeignClient: MSA 통신 Resilience4J Hystrics(CircuitBreaker): Circuit breaker 패턴을 자바 기반으로 오픈소스화한 라이브러리 Bulkhead RateLimiter Retry TimeLimiter Cache Sleuth Zipkin___" }, { "title": "SIY Spring Cloud Config", "url": "/posts/SIY-Spring-Cloud-Config/", "categories": "Spring, Cloud", "tags": "spring, cloud, siy, config", "date": "2021-06-08 14:30:00 +0900", "snippet": "SIY Spring Cloud Config(RabbitMQ)actuator를 통해 원격에서 REST API를 통해 서비스를 Refresh 시킬 수 있습니다.즉 설정파일이 바뀌었다고 프로젝트를 다시 빌드할 필요가 없어졌습니다.또한, 실행중에 빌드, 배포 없이 동적으로 변경시킬 수 있습니다.💿 준비 RabbitMQ 설치 먼저 Erlang 설치해야됨 💿 bootstrap.ymlbootstrap.yml은 application.yml 보다 먼저 적용되는 yml로 cloud에서 configuration을 가져올..." }, { "title": "SIY Spring Cloud Api GateWay 2", "url": "/posts/SIY-Spring-Cloud-API-GateWay-2/", "categories": "Spring, Cloud", "tags": "spring, cloud, siy, apigateway", "date": "2021-06-08 13:30:00 +0900", "snippet": "Spring Cloud Api Gateway(인증 및 인가)💿 CORSAPI Gateway도 cors policy가 적용 되므로 defaultfilter를 적용해 줌으로서 허용하는 origin을 설정할 수 있다.💿 인증 방식 쿠키를 이용한 jwt 인증 redis의 Cache를 이용한 logout💿 인증 하는 곳 gateway 코드: https://github.com/JeongJin984/SIYApiGateway front 코드: https://github.com/JeongJin984/KitMarketFront Fron..." }, { "title": "SIY Spring Cloud Api GateWay 1", "url": "/posts/SIY-Spring-Cloud-API-GateWay-1/", "categories": "Spring, Cloud", "tags": "spring, cloud, apigateway, siy", "date": "2021-06-08 12:30:00 +0900", "snippet": "Spring Cloud Api Gateway(Filter)💿 APi Gateway 주요 기능 인증 및 인가(Authentication and Authorization) 인증서 관리나, 인증, SSL, 프로토콜 변환과 같은 기능들은 API Gateway에서 오프로드 함으로, 각각의 서비스의 부담을 줄이고, 서비스의 관리 및 업그레이드를 보다 쉽게 처리 Authentication(인증)과 Authorization(인가)의 차이 Authentication은 유저가 누구인지 확인하는 절차(A라고 하며 접근하는 사람이 진짜 A인..." }, { "title": "Network-AMQP", "url": "/posts/Network-AMQP/", "categories": "Network, Protocal", "tags": "network, protocal, amqp", "date": "2021-06-08 11:30:00 +0900", "snippet": "Network-AMQP💿 AMQP 통신 Advanced Message Queing Protocal의 약자로 흔히 알고있은 MQ의 오픈소스에 기반한 표준 프로토콜 가장 많이 쓰는 건 erlang과 자바에 기반을 둔 RabbitMQ___💿 등장 배경 상용화된 MQ 제품들 대부분 플랫폼 종속적: 서로 다른 서비스 간에 메시지를 교환하기 위해서는 메세지 포멧 컨버전을 통한 메시지 브릿지를 사용하거나 시스템 자체를 통합할 필요가 있었음 MQ는 금융 쪽에서 많이 사용됨 이러한 약점을 사용 보완하는 ..." }, { "title": "authentication-jwt", "url": "/posts/Authentication-jwt/", "categories": "Authentication, Cloud", "tags": "authentication, security, jwt, token", "date": "2021-06-08 10:30:00 +0900", "snippet": "authentication(JWT)💿 jwt구조 WT는 Header, Payload, Signature의 3 부분으로 이루어지며, Json 형태인 각 부분은 Base64로 인코딩 되어 표현된다. 각각의 부분을 이어 주기 위해 . 구분자를 사용 Base64는 암호화된 문자열이 아니고, 같은 문자열에 대해 항상 같은 인코딩 문자열을 반환(즉 암호화 안되있어서 공개되어있다.) Header(헤더) typ 와 alg 두가지 정보로 구성(Signature를 해싱하기 위한 알고리즘 지정) ..." }, { "title": "SIY Spring Cloud Eureka", "url": "/posts/SIY-Spring-Cloud-Eureka/", "categories": "Spring, Cloud", "tags": "spring, cloud, msa, eureka, siy", "date": "2021-06-06 17:30:00 +0900", "snippet": "Eureka💿 Eureka유레카는 클라이언트와 서버로 나뉘어저 있다. 유레카 서버 모든 마이크로 서비스가 자신의 가용성을 등록하는 레지스트리 등록되는 정보는 서비스 ID 와 URL이 포함되는데 유레카 클라이언트를 통해서 이 정보를 서버에 등록 등록된 정보를 통해서 서비스의 동적 발견이 가능 유레카 클라이언트 등록된 마이크로 서비스를 호출해서 사용할 유레카 클라이언트를 발견(gateway) 유레카 서버는 동시에 유레카 클라이언트이기도 해서 다른 유레카 서버..." }, { "title": "Operation System 6 file", "url": "/posts/Operation-System-7-file/", "categories": "CS, OS", "tags": "cs, os, file", "date": "2021-06-06 17:30:00 +0900", "snippet": "Operation System 6(파일 시스템)💿 파일 운영체제의 저장장치의 물리적 특성을 추상화한 논리적 저장 단위파일은 운영체제에 의해 물리 장치들로 맵핑되기도 하며,일반적으로 비휘발적 특성을 지니기 때문에, 전원이 끊어진 상황에서도 정보들을 영구히 보존할 수 있다 프로그램 : 소스 프로그램, 목적 프로그램으로 나누어 진다. 자료 : 숫자,문자,이진수, 자유 형식이거나 정해진 형식 등, 저장할 수 있는 모든 것이 자료가 될 수 있다.파일 속성 이름 : 사람이 읽을 수 있는 형태로 유지되는 유일한 정보 식별자 : 파..." }, { "title": "Operation System 6 Virtual Memory", "url": "/posts/Operation-System-6-virtualMemoy-1/", "categories": "CS, OS", "tags": "cs, os, virtual-memory", "date": "2021-06-06 16:30:00 +0900", "snippet": "Operation System 6(페이징)💿 가상 메모리 메모리 과할당(over allocation) 즉 실제 메모리의 사이즈 보다 더 큰 사이즈의 메모리를 프로세스에 할당하기 위한 방법프로세스의 모든 코드는 항상 필요한 것이 아니다.필요한 부분만 메모리에 올림으로써 메인 메모리에 올라가는 프로세스의 크기를 줄인다.(동적 적재와 비슷) 페이징을 먼저 실행 메인 메모리의 외부 단편화를 해결하면 효율적이기 때문 여기서 필요한 부분과 필요없는 부분을 나눈다. 필요한 부분만 메모리에 적재이를 요구 페..." }, { "title": "Operation System 4 paging 2", "url": "/posts/Operation-System-5-paging-2/", "categories": "CS, OS", "tags": "cs, os, paging", "date": "2021-06-06 15:30:00 +0900", "snippet": "Operation System 4(페이징)💿 페이지 교체 알고리즘 현재 할당된 페이지 중 어떤 것 교체할 지 결정하는 방법가상 메모리는 요구 페이지 기법을 통해 필요한 페이지만 메모리에 적재하고 사용하지 않는 부분은 그대로 둠하지만 필요한 페이지만 올려도 메모리는 결국 가득 차게 되고, 올라와있던 페이지가 사용이 다 된 후에도 자리만 차지하고 있을 수 있음따라서 메모리가 가득 차면, 추가로 페이지를 가져오기 위해서 안쓰는 페이지는 out하고, 해당 공간에 현재 필요한 페이지를 in 시켜야 함여기서 어떤 페이지를 out 시켜야..." }, { "title": "Operation System 4 paging 1", "url": "/posts/Operation-System-5-paging-1/", "categories": "CS, OS", "tags": "cs, os, paging", "date": "2021-06-06 14:30:00 +0900", "snippet": "Operation System 4(페이징)💿 내부 단편화와 외부 단편화내부 단편화 빈 공간이 50인데 들어간 프로세스가 30 이므로 20이라는 공간이 남음. 저 공간은 너무 작아서 사용하지 못함외부 단편화 작업보다 많은 공간이 남아 있더라도 실제로 그 작업을 받아 들이지 못하는 경우💿 페이징 과 세그먼테이션 다중 프로그래밍 시스템에 여러 프로세스를 수용하기 위해 주기억 장치를 동적 분할하는 메모리 관리 작업이 필요메모리 관리 기법 연속 메모리 관리: 프로그램 전체가 하나의 커다란 공간에 연속적으로 할당 ..." }, { "title": "Operation System 4 memory", "url": "/posts/Operation-System-4-memoy/", "categories": "CS, OS", "tags": "cs, os, memory", "date": "2021-06-06 13:30:00 +0900", "snippet": "Operation System 4(메모리)💿 메모리 메모리는 주소와 데이터로 구성CPU가 원하는 데이터의 주소를 메모리에 보내주게 되면 CPU에게 해당하는 데이터를 보내준다. 또한 CPU에서 계산된 결과를 메모리의 특정 주소를 담아 명령을 보내면 메모리에 해당 주소에 데이터를 저장한다.프로그램을 개발할 때는 여러 가지의 파일 형태로 개발을 하는데 소스 파일은 고수준언어 혹은 어셈블리로 개발된 파일을 말한다. 소스파일은 컴파일러와 어셈블러에 의해 목적 파일로 전환된다. 목적파일은 소스 파일에 대한 컴파일 또는..." }, { "title": "Operation System 3 thread 2", "url": "/posts/Operation-System-3-thread-2/", "categories": "CS, OS", "tags": "cs, os, thread", "date": "2021-06-06 12:30:00 +0900", "snippet": "Operation System 3(스레드 2)💿 Dead Lock(교착 상태) 스레드(혹은 프로세스)가 자원을 얻지 못해서 다음 처리를 못하는 상태 시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생🔔 주의밑에서 나오는 모든 프로세스에 대한 것은 스레드에도 똑같이 해당되는 내용임즉 프로세스 = 프로세스 + 스레드데드락이 일어나는 경우 프로세스1과 2가 자원1,2를 모두 얻어야 한다고 가정해보자 t1 : 프로세스1이 자원1을 얻음 / 프로세스2가 자원2를 얻음 t2 : 프로세스1은 자원2를 기다림 / 프로세스..." }, { "title": "Software Engineering MSA", "url": "/posts/Software-Engineering-MSA/", "categories": "Architecture, MSA", "tags": "architecture, msa", "date": "2021-06-06 11:30:00 +0900", "snippet": "MSA(Micro Service Architecture)💿 MSA Monolith: ‘한 덩어리’에 해당하는 구조로 이루어져 있다. 모든 기능을 하나의 어플리케이션에서 비즈니스 로직을 구성해 운영한다. 개발을 하거나 설정에 있어서 간단하기에 작은 사이즈의 프로젝트에서는 유리하지만, 시스템이 점점 확장되거나 큰 프로젝트에서는 단점들이 존재한다. 빌드/테스트 시간의 증가: 하나를 수정해도 시스템 전체를 빌드해야함, 유지 보수가 힘들다. 작은 문제가 시스템 전체에 문제를 일으킴: 서비스 하나의 트래픽 ..." }, { "title": "Operation System 3 thread 1", "url": "/posts/Operation-System-3-thread-1/", "categories": "CS, OS", "tags": "cs, os, thread", "date": "2021-06-06 11:30:00 +0900", "snippet": "Operation System 3(스레드 1) 프로세스: 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램 스레드: 프로세스 안에서 실행되는 여러 흐름 단위 커널: 운영체제 중 항상 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올려놓고 그렇지 않은 부분은 필요할 때 메모리에 올려서 사용하게 된다. 이 때 메모리에 상주하는 운영체제의 부분을 커널이라고 함💿 멀티 프로세스, 멀티 스레드멀티 프로세스 하나의 컴퓨터에 여러 CPU 장착 &amp;gt; 하나 이상의 프로세스들을 동시에 처리(병렬) 장점: 안전성(메모리 침범..." }, { "title": "Operation System 2 process 4", "url": "/posts/Operation-System-2-process-4/", "categories": "CS, OS", "tags": "cs, os, process", "date": "2021-06-05 14:30:00 +0900", "snippet": "Operation System 2(프로세스 4)💿 IPC(Inter Process Communication)프로세스는 독립적으로 실행된다. 즉 독립되어있다는 것은 다른 프로세스에게 영향을 받지 않는다고 말할 수 있다.이런 독립적인 구조를 가진 프로세스 간의 통신을 해결해 주는 것이 IPC 통신이다. 프로세스는 커널이 제공하는 IPC 설비를 이용해 프로세스간 통신을 할 수 있게 된다.종류 익명 PIPE 2개의 프로세스를 연결하는데 하나의 프로세스는 쓰기만 하고 다른 하나는 읽기만 할 수 있다. 한쪽 ..." }, { "title": "Operation System 2 process 3", "url": "/posts/Operation-System-2-process-3/", "categories": "CS, OS", "tags": "cs, os, process", "date": "2021-06-05 13:30:00 +0900", "snippet": "Operation System 2(프로세스 3)💿 System Call fork(), exec(), wait()와 같은 Process를 생성, 실행, 제어하기 위한 함수 fork, exec는 새로운 Processs 생성과 관련이 있다. wait는 Process(Parent)가 만든 다른 Process(Child)가 끝날 때 까지 기다리는 명령어fork코드#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;..." }, { "title": "Operation System 2 process 2", "url": "/posts/Operation-System-2-process-2/", "categories": "CS, OS", "tags": "cs, os, process", "date": "2021-06-05 12:30:00 +0900", "snippet": "Operation System 2(프로세스 2)💿 System Call fork(), exec(), wait()와 같은 Process를 생성, 실행, 제어하기 위한 함수 fork, exec는 새로운 Processs 생성과 관련이 있다. wait는 Process(Parent)가 만든 다른 Process(Child)가 끝날 때 까지 기다리는 명령어fork코드#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;..." }, { "title": "Operation System 2 process 1", "url": "/posts/Operation-System-2-process-1/", "categories": "CS, OS", "tags": "cs, os, process", "date": "2021-06-05 11:30:00 +0900", "snippet": "Operation System 2(프로세스 1) 프로세스: 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램 스레드: 프로세스 안에서 실행되는 여러 흐름 단위 커널: 운영체제 중 항상 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올려놓고 그렇지 않은 부분은 필요할 때 메모리에 올려서 사용하게 된다. 이 때 메모리에 상주하는 운영체제의 부분을 커널이라고 함💿 역할프로세스는 독립적인 주소공간 할당(공유 메모리가 따로 존재함) Code: 코드 자체를 구성하는 메모리 영역(프로그램 명령) Data: 전역변수, 정적변수, ..." }, { "title": "Operation System 1", "url": "/posts/Operation-System-1/", "categories": "CS, OS", "tags": "cs, os", "date": "2021-06-05 10:30:00 +0900", "snippet": "Operation System 1 일반적으로 하드웨어를 관리하고, 응용 프로그램과 하드웨어 사이에서 인터페이스 역할을 하며 시스템의 동작을 제어하는 시스템 소프트웨어즉 운영체제는 시스템의 자원과 동작을 관리하는 소프트 웨어💿 역할 프로세스 관리: CPU를 점유해야 할 프로세스를 결정하고, CPU를 프로세스에 할당하며 이 프로세스 간 공유 자원 접근과 통신 등을 관리 프로세스, 스레드 스케줄링 동기화 IPC 통신 저장장치 관리:1차 저장장치인 메인메모리와 2차 저장장치인..." }, { "title": "Computer Architecure 3", "url": "/posts/Computer-Architecture-3/", "categories": "CS, ComputerArchitecture", "tags": "cs, computerarchitecture, hardware", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 3(ETC)💿 기억 장치 프로그램, 데이터, 연산의 결과를 저장하는 장치, 주기억 장치와 보조기억 장치로 나눠지며. RAM, ROM도 이곳에 해당함. 분류 주기억 장치: 속도가 빠름, 데이터를 결과를 일시적으로 저장(1차 저장장치) 보조기억장치: 속도가 느림, 데이터를 영구적으로 저장(2차 저장장치, HDD,NAND Flash) 💿 입출력 장치 입력과 출력 장치로 나누어짐 분류 입력장치: 마우스, 키보드등 컴퓨터로 데이터를 입력하는 ..." }, { "title": "Computer Architecure 2", "url": "/posts/Computer-Architecture-2/", "categories": "CS, ComputerArchitecture", "tags": "cs, computerarchitecture, hardware, cpu", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 2(HardWare-CPU) 두뇌에 해당하는 부분, 프로그램 명령어와 데이터를 읽어와 처리하고 명령어의 수행 순서를 제어함___💿 마이크로 프로세서 CPU의 핵심 기능을 통합한 집적 회로다목적 실리콘 칩으로, 클록 구동 방식, 레지스터 기반의 바이너리 데이터를 입력으로 받고 메모리에 저장된 지침에 따라 처리한 후 출력을 제공구성 ALU: 모든 산술 및 논리 연산 ControlUnit(제어장치) RegisterArray: 데이터 처리를 위한 임시 고속 Access 메모리💿 구성전체 ..." }, { "title": "Computer Architecure 1", "url": "/posts/Computer-Architecture-1/", "categories": "CS, ComputerArchitecture", "tags": "cs, computerarchitecture, hardware", "date": "2021-06-04 01:00:00 +0900", "snippet": "Computer Architecure 1💿 하드웨어 컴퓨터를 구성하는 기계적 장치구성 CPU(중앙 처리 장치) 기억장치: RAM, HDD 입출력 장치: 마우스 프린터위의 것들은 시스템 버스로 연결되어 있으며 시스템 버스는 데이터와 명령어, 제어신호를 각 장치로 실어나르는 역할을 한다.___💿 소프트웨어 하드웨어의 동작을 지시하고 제어하는 명령어 집합 시스템 소프트웨어: 운영체제, 컴파일러 응용 소프트웨어: 워드 프로세서, 게임 등등___💿 고정 소수점 &amp;amp; 부동 소수점 컴퓨터의 실수를 표현하는 방법고..." }, { "title": "Design Pattern 1", "url": "/posts/Design-Pattern-1/", "categories": "Design, Pattern", "tags": "design, pattern, Gof", "date": "2021-03-31 15:30:00 +0900", "snippet": "Design Pattern(생성 패턴)💿 UML 화살표💿 추상 팩토리 패턴 상세화된 서브 클래스를 정의하지 않고도 서로 관련성이 있거나 독립적인 여러 객체의 군을 생성하기 위한 인터페이스 제공 한 팩토리에서 여러 객체의 군을 생성 이미 구현된 팩토리에서 어떤 종류의 객체를 생성할지 정해짐 create… 이런식으로 정해져있음 대신 팩토리의 종류가 달라짐 구상 클래스에 의존하지 않고 여러 개의 관련된 객체를 하나의 팩토리로 묶음 인자에 따라 관련된 객체들을 생성하는 팩토리의 종류가 결정됨..." }, { "title": "Spring Update 2.1", "url": "/posts/Spring-Update-2.1/", "categories": "Java, Spring", "tags": "java, spring, update", "date": "2021-03-22 21:30:00 +0900", "snippet": "Spring Update 2.1💿 용어 출시일: 2018년 10월 조요 변경 내역 Spring Framework 5.1 자바 11 지원 스프링 데이터 JPA, lazy 모드 지원 스프링 App이 좀 더 빠르게 뜨게 하기 위하여 Repository가 필요할 때 생성되도록 lazy 모드 지원 의존성 변경 Hibernate 5.3(JPA 2.2) Tomcat 9 Juni..." }, { "title": "Spring QueryDsl", "url": "/posts/Spring-QueryDsl/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-03-22 21:30:00 +0900", "snippet": "Spring QueryDsl💿 기본 문법기본 검색 QueryMemer findMember = queryFactory .selectFrom(member) .where(member.username.eq(&quot;member1&quot;) .and(member.age.eq(10))) .findOne(); 검색 조건은 .and() 혹은 .or()를 메서드 체인으로 연결할 수 있다. selectFrom은 select() 와 from()을 합친 것결과 조회 fetch(): 리스트..." }, { "title": "Spring JPA 3", "url": "/posts/Spring-JPA-3/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-03-06 18:16:00 +0900", "snippet": "Spring JPA 3💿 Fetch Join &amp;amp; EAGER &amp;amp; LAZY즉시 로딩(EARGR로 설정) 멤버 전체를 조회하기 위해 JPQL 실행 select m from member m JPQL은 EAGER와 무관하게 SQL로 그대로 번역 -&amp;gt; select m.* from member JPQL 결과가 member만 조회하고, team은 조회하지 않음 member와 team이 즉시 로딩으로 설정되어 있기 때문에 연관된 팀을 각각 쿼리를 날려서 추가 조회 (N+1)지연 로딩(LAZY로 ..." }, { "title": "Functional programming1", "url": "/posts/Functional-Programming1/", "categories": "programming", "tags": "functional, basic", "date": "2021-03-05 23:42:00 +0900", "snippet": "함수형 프로그래밍(Functional Programming)🔘 함수형 프로그래밍 함수를 1급 객체로 취금하여 프로그래밍 하는 형식1급 객체(First Object) 변수나 데이터 구조안에 담을 수 있다. 파라미터로 전달 할 수 있다. 반환값으로 사용할 수 있다. 할당에 사용된 이름과 관계없이 고유한 구별이 가능하다. 동적으로 프로퍼티 할당이 가능하다.고차함수(High-Order Function) 람다 계산법에 의해 아래의 조건을 만족하는 함수 함수에 함수를 파라미터로 전달할 수 있다. 함수의 반환값으로 함수를 ..." }, { "title": "Java Lambda", "url": "/posts/Java-Lambda/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-03-05 23:40:00 +0900", "snippet": "Lambda💿 함수형 프로그래밍 함수를 1급 객체로 취금하여 프로그래밍 하는 형식 자세한 것은 Funtional Programming 참고💿 Lambda Expressions 식별자 없이 실행 가능한 함수(()-&amp;gt;{return foo;} or ()-&amp;gt; ()) 메서드를 하나의 식으로 표현하는 것 익명함수(anonymous function)이라고도 표현장점 가독성 간결성 멀티쓰레드 환경에 용이 함수를 만드는 과정없이 한번에 처리 -&amp;gt; 생산성단점 재사용 불가 디버깅이 어렵다 ..." }, { "title": "Java IO", "url": "/posts/Java-IO/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-02-27 23:40:00 +0900", "snippet": "I/O💿 I/O input과 output의 약자로 입력과 출력을 나타낸다. 즉, 컴퓨터 내부 또는 외부와의 장치와 프로그램간의 데이터를 주고 받는 것을 말한다.💿 NIO 스트림 기반 I/O에서는 데이터 소스와 데이터 싱크, 자바 프로그램간의 데이터 이동을 위해서 스트림을 사용한다. 자바 프로그램은 스트림으로부터 데이터를 읽거나 쓴다. 이러한 접근은 I/O 수행을 느리게 만든다. NIO는 스트림 기반 I/O는 느린 속도 문제를 해결한다. NIO에서는 I/O처리를 위해 채널과 버퍼를 사용한다. 채널은 stream과 비슷하다. ..." }, { "title": "Spring-JPA-Entity", "url": "/posts/Spring-JPA-Entity/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-02-01 14:09:00 +0900", "snippet": "Spring JPAEntity 설계시 주의사항🔘 Entity에는 가급적 Setter를 사용하지 말자 변경 포인트가 많아서 유지보수가 어렵다.🔘 모든 연관관계는 LAZY(지연) LOADING으로 설정 Eager(즉시) Loading은 예측이 어렵고 어떤 SQL이 실행 될지 추적하기가 어렵다. 특히 JPQL을 실행하면 N+1 문제가 자주 발생한다.(select o from object)(무조건 같이 로딩되기 때문에) 연관된 Entity를 함께 DB에 조회해야 한다면, fetch join 또는 Ent..." }, { "title": "SQL Basic", "url": "/posts/SQL-Basic/", "categories": "Lang, SQL", "tags": "java, basic", "date": "2021-01-28 23:40:00 +0900", "snippet": "SQL💿 데이터 어떤 필요에 의해 수집했지만 아직 특정 목적을 윟 ㅐ정제하지 않은 값 정보: 수집된 데이터를 어떤 목적을 위해 분석 가공하여 가치를 추가하거나 새로운 의미를 부여한 결과💿 데이터 모델 계층형 나뭇가지 형태의 트리 구조를 활용하여 데이터 관련성을 계층별로 나누어 부모와 자식 같은 관계를 정의하고 데이터를 관리 객체 지향형 객체 지향 프로그래밍에서 사용하는 객체 개념을 기반으로 한 데이터 모델 관계형 데이터 간 관계에 초점을 둔 모델 ..." }, { "title": "Java Generic", "url": "/posts/Java-Generic/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-01-27 23:40:00 +0900", "snippet": "Generic💿 Generic Data Type을 일반화 하는것을 의미 Classs 나 Method에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법 Class나 메서드 내부에서 사용되는 객체의 타입의 안정성을 높일 수 있다. 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다. Object 타입으로 사용시 다시 타입 변환을 해줘야 하는 번거로움이 있을 수 있다.장점 잘못된 타입이 사용될 수 있는 문제를 컴파일 과정에서 제거할 수 있기 때문 컴파일러는..." }, { "title": "Spring", "url": "/posts/Java-Annotation/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-01-26 23:40:00 +0900", "snippet": "Java Annotation🔘 Annotation 어노테이션의 역할도 주석과 크게 다르지 않는다. 일반주석과 큰 차이점은 코드를 작성할 수 있다는 것이 다르다. 코드를 작성할 수 있다는 뜻은 어노테이션으로 뭔가를 할 수 있다는 뜻이 된다. 어노테이션도 enum과 마찬가지로 1.5에 등장했다고 한다.🔘 Annotation 종류 @Retention 자바 컴파일러가 어노테이션을 다루는 방법을 기술하며, 특정 시점까지 영향을 미치는지를 결정 RetentionPolicy.SOURCE: 컴파일 전까지만 ..." }, { "title": "Spring JPA 2", "url": "/posts/Spring-JPA-2/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-01-24 18:16:00 +0900", "snippet": "Spring JPA 2💿 Entity Mapping@Entity Entity는 객체 관점에서 부르는 이름 보통 Class와 같은 이름을 사용하기 때문에 값을 변경하지 않음 Entity의 이름은 JQL에서 사용@Table Relation(database) 관점에서 부르는 이름 @Entity의 이름이 기본값 Table의 이름은 SQL에서 사용@Id Entity의 Primary Key를 매핑할 떄 사용 java의 모든 primitive 와 Wrapper 타입 사용 가능 Date랑 BigDecimal, ..." }, { "title": "Spring JPA", "url": "/posts/Spring-JPA/", "categories": "Java, Spring", "tags": "java, spring, jpa", "date": "2021-01-24 18:16:00 +0900", "snippet": "Spring JPA💿 JPA 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스여기서 주목할 점은 바로 인터페이스라는 것이다. JPA는 특정 기능을 하는 라이브러리가 아니다. JPA는 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의한 방법이다.JPA는 단순히 interface이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의 대부분은 각종 Annotation 과 interface, enum, Exception으로 이루어져 있다. JPA의 핵심이..." }, { "title": "Thread Process", "url": "/posts/Thread-Process/", "categories": "Lang, java", "tags": "java, basic", "date": "2021-01-22 23:40:00 +0900", "snippet": "Thread Process💿 Definition 프로그램: 파일이 저장 장치에 저장되어 있지만 메모리에는 올라가 있지 않은 정적인 상태를 말한다. 프로세스: 운영체제로부터 자원을 할당받은 작업의 단위. 스레드: 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위.💿 Thread &amp;amp; ProcessThread는 Process와 다르게 Thread 간 Memory를 공유하며 작동 즉 Thread는 Process의 자원을 공유하면서 Process 실행 흐름의 일부가 된다.💿 Thread 운영체제는 프로세스마다..." }, { "title": "Java Thread", "url": "/posts/Java-Thread/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-01-22 23:40:00 +0900", "snippet": "Java Thread💿 Thread LifeCycle New: Thread.start() 하면 실행됨 Runnable: start하면 runnable로 바뀜 Control이 Thread Scheduler로 가서 실행을 기다림 Running: Scheduler가 실행을 시킨 상태 Blocked Waiting for I/O resources Waiting for a monitor lock Waiting: 다른 Thread가 특정 action을 perform하길..." }, { "title": "Spring-Web", "url": "/posts/Spring-Web/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2021-01-21 23:17:00 +0900", "snippet": "Spring WebURL get, post는 기본 head: get과 같으나 header 정보만 가져옴 options 사용할 수 있는 http Method 제공 서버 또는 특정 리소스가 제공하는 기능을 확인 서버 또는 allow 응답 헤더에 사용할 수 있는 http method 목록 제공 @Controller request를 담당하는 annotation RestController는 자동으로 responsebody에 객체를 담아준다. @RequestMapping: Respons..." }, { "title": "Java Exception", "url": "/posts/Java-Exception/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-01-16 12:48:00 +0900", "snippet": "Java Exception💿 목차 자바에서 예외 처리 방법 (try, catch, throw, throws, finally) 자바가 제공하는 예외 계층 구조 Exception과 Error의 차이는? RuntimeException과 RE가 아닌 것의 차이는? 커스텀한 예외 만드는 방법예외(Exception)와 에러(Error) 발생시점 컴파일 에러 런타임 에러 발생 원인 논리적 에러 시스템 에러 에러: 하드웨어의 오작동으로 실행 오류가 발생하는..." }, { "title": "Spring Security", "url": "/posts/Spring-Security/", "categories": "Java, Spring", "tags": "java, spring, security", "date": "2021-01-11 14:09:00 +0900", "snippet": "Spring SecuritySpring Security? 스프링 시큐리티는 스프링 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 하위 프레임 워크기본용어 접근 주체: 보호된 리소스에 접근하는 대상 인증(Authentication): 보호된 리소스에 접근한 대상에 대해 누구인지, App의 작업을 수행해도 되는 주체인지 확인하는 과정을 즉 누구인지 인가(Authorize): 해당 리소스에 대해 접근 권한을 가지고 있는지 확인하는 과정 즉 무엇을 할 수 있는지 ..." }, { "title": "Spring Security2", "url": "/posts/Spring-Security2/", "categories": "Java, Spring", "tags": "java, spring, security", "date": "2021-01-09 14:09:00 +0900", "snippet": "Spring Security-2DelegatingFilterProxy Spring Security가 모든 App 요청을 감싸게 해서 보안이 적용되게 하는 서블릿 필터 서블릿 필터는 스프링에서 정의된 빈을 주입해서 사용할 수 없음 특정한 이름을 가진 스프링 빈을 찾아 그 빈에게 요청을 위임 springSecurityFilterChain 이름으로 생성된 빈을 ApplicationContext에서 찾아 요청을 위임 실제 보안처리는 하지 않음 &amp;lt;filter&amp;gt; &am..." }, { "title": "Java Interface", "url": "/posts/Java-Interface/", "categories": "Lang, Java", "tags": "java, basic", "date": "2021-01-09 14:09:00 +0900", "snippet": "Java InterfaceInterface 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높이기 위해 인터페이스를 사용Interface 정의public interface 인터페이스명 {//상수타입 상수명 = 값;//추상 메소드타입 메소드명(매개변수, ... ); //디폴트 메소드default 타입 메소드명(매개변수, ... ){ //구현부}//정적 메소드static 타입 메소드명(매개변수) { //구현부} 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조 (절대적)..." }, { "title": "Spring Maven", "url": "/posts/Spring-maven/", "categories": "Java, Spring", "tags": "java, maven", "date": "2021-01-01 12:13:00 +0900", "snippet": "Maven 설정자바 소스 설정&amp;lt;build&amp;gt; &amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt;&amp;lt;/build&amp;gt;자바소스 여러 개 설정&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;l..." }, { "title": "Java package", "url": "/posts/Java-package/", "categories": "Lang, Java", "tags": "java, basics", "date": "2021-01-01 11:08:00 +0900", "snippet": "PackagePackage 클래스명의 고유성을 보장하기 위해서 사용 클래스를 구분짓는 폴더 개념 자바는 패키지의 가장 상위 디렉토리(root) 에서 실행해야한다는 약속이 있기 때문에 해당 패키지로 가서 컴파일 하지 않는다. 소스에 가장 첫 줄에 있어야하고, 패키지 선언은 소스 하나에 하나만 있어야한다. 패키지 이름과 위치한 폴더의 이름이 같아야한다. 패키지이름을 java로 시작하면 안된다. 모든 자바 패키지들은 가장 상위 패키지인 java와 javax 패키지에 종속 패키지를 정해주지 않는다면, 클래스는 기본적으로..." }, { "title": "Java Inheritance", "url": "/posts/Java-Inheritance/", "categories": "Lang, Java", "tags": "java, basics", "date": "2020-12-26 12:19:00 +0900", "snippet": "Inheritance상속의 특징 다중 상속 불가 자식 클래스는 부모 클래스로부터 메소드와 필드를 물려받아 사용 부모 클래스는 자식 클래스에서 정의한 메소드나 필드를 사용불가 부모 클래스는 여러 자식 클래스에게 상속이 가능 자바의 모든 클래스는 최상위 클래스 Object의 서브클래스이다. super 자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자(super())가 실행 자식 클래스의 생성자에 super()를 안써주면,자바는 부모 클래스의 기본 생성자를 탐색오버라이딩 상속관계에 있는 클래..." }, { "title": "Java Class", "url": "/posts/Java-Class/", "categories": "Lang, java", "tags": "java, basics", "date": "2020-12-19 15:30:00 +0900", "snippet": "Java Class클래스를 정의하는 방법 클래스의 구조 시그니처 다른 클래스로 확장(Extends) 선언 가능 (슈퍼 클래스, 서브 클래스 관계 설정) 확장(Extends) 시, 클래스의 멤버들 접근을 제어할 수 있음 (public, protected, private 등) 다른 클래스를 인터페이스(Interface)로 선언 가능 - 멤버 변수: Class 안의 기능을 끄집어 낼 때 사용 - 메서드: 기능을 나타냄 - 생성자: 처음에 초기화 해..." }, { "title": "Java Reflection", "url": "/posts/Java-Reflection/", "categories": "Java, Spring", "tags": "java, reflection", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java Reflection리플렉션의 시작은 ClassClass에 접근하는 방법 모든 클래스를 로딩한 다음 Class의 인스턴스가 생긴다.(static 이므로) &quot;Type.class&quot;로 접근할 수 있다.public class DemoSpringDiApplication { public static void main(String[] args) throws ClassNotFoundException { Class&amp;lt;Book&amp;gt; bookClass = Book.class; ..." }, { "title": "Java-DataStructure", "url": "/posts/Java-DataStructure/", "categories": "Lang, Java", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java DataStructureStack &amp;amp; QueueListNodepackage base;public class ListNode { public int data; public ListNode next; public ListNode(int input) { data = input; next = null; } @Override public String toString() { return String.valueOf(data); }}Linked..." }, { "title": "JUnit", "url": "/posts/JUnit/", "categories": "Java, JUnit", "tags": "java, junit", "date": "2020-11-28 15:30:00 +0900", "snippet": "JUnitJUnit 기초 @BeforeAll: 시작 전 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @AfterAll: 테스트 후 실행하는 코드(클래스마다 Generate 하는게 아니라면 static으로 해야함) @BeforeEach: 각 @Test 실행 전 실행하는 코드 @AfterEach: 각 @Test 실행 후 실행하는 코드 @DisplayName: class에 DisplayNameGeneration을 통해 만들어진 이름으로 테스트 코드 이름 변경Assertion asser..." }, { "title": "Java-Types", "url": "/posts/JavaType/", "categories": "Lang, Java", "tags": "java, basics", "date": "2020-11-28 15:30:00 +0900", "snippet": "Java Operator연산자개수에 따른 연산자 단항 연산자: 피연산자가 1개인 연산자 이항 연산자: 피연산자가 2개인 연산자 삼항 연산자: 피연산자가 3개인 연산자연산자 처리 순서 (), [] 단항 연산자: ++, –, +, -,(type), !, ~ 산술 연산자: %, /, *, +, - 시프트 연산자: », «, »&amp;gt; 관계 연산자: &amp;lt;, &amp;lt;=, &amp;gt;, != 논리 연산자: &amp;amp;, ^, ..." }, { "title": "Java-Basics", "url": "/posts/java-Basics/", "categories": "Lang, Java", "tags": "java, datatype", "date": "2020-11-20 11:14:00 +0900", "snippet": "Java BasicsData Type메모리에 집접 담는가? Primitive Type(기본형): 직접 데이터를 담음 Reference Type(참조형): 메모리를 참조Primitive Type(기본형) 총 8가지의 기본형 타입(Primitive type)을 미리 정의하여 제공 기본값이 있기 때문에 Null이 존재하지 않는다. 만약 기본형 타입에 Null을 넣고 싶다면 래퍼 클래스를 활용 실제 값을 저장하는 공간으로 스택(Stack) 메모리에 저장된다. Java에는 C 처럼 Sizeof가 없으나 Primitive Ty..." }, { "title": "Spring Web MVC 2", "url": "/posts/Spring-Web-MVC-2/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-20 01:14:00 +0900", "snippet": "Web MVC 2💿 DispatcherServlet Servlet Container에서 Http를 통해 들어오는 모든 요청을 Presentation 계층의 제일 앞에 둬서 중앙 집중식으로 처리 해 주는 Front Controller 즉, Client로부터 어떠한 요청이 오면 Tomcat(톰캣)과 같은 ServletContainer가 요청을 받는데 이때 제일 앞에서 서버로 들어오는 모든 요청을 처리하는 Front ControllerWhy? DispatcherServlet은 web.xml의 역할을 축소 기존에..." }, { "title": "JVM", "url": "/posts/JVM/", "categories": "Lang, Java", "tags": "java, jvm", "date": "2020-11-08 15:30:00 +0900", "snippet": "JVMJVM이란 JAVA Virtial Machine의 약자로 Java Byte Code를 OS에 맞게 해석해주는 역할을 하는 가상머신 Java Compiler는 .java파일을 .class라는 Java byte code로 변환 Byte 코드는 기계어가 아니기 때문에 OS에서 바로 실행이 안됨 JVM은 OS가 ByteCode를 이해할 수 있도록 해석해 주는 역할을 함 따라서 JVM은 c언어 같은 네이티브 언어에 비해 속도가 느렸지만 JIT(Just In Time)컴파일러 구현을 ..." }, { "title": "Spring Web MVC 1", "url": "/posts/Spring-Web-MVC-1/", "categories": "Java, Spring", "tags": "web, springmvc", "date": "2020-11-06 16:14:00 +0900", "snippet": "Web MVC💿 Servlet 클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술 특징 클라이언트의 요청에 대해 동적으로 작동하는 web-app Component html을 사용하여 요청에 응답 Java Thread를 이용하여 동작한다. MVC 패턴에 Controller로 이용된다. Http 서비스를 지원하는 javax.servlet.http.HttpServlet Class를 상속받는다. UDP보다 ..." }, { "title": "Tensorflow2", "url": "/posts/Tensorflow2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "Tensorflow2개발 배경 Tensorflow1의 계산 그래프(세션) 사용의 복잡성 속도 직관성 면에서 모두 떨어짐 Keras가 사용성을 높여주나, 보다 유기적 결합 필요 Ecosystem변화와 특징 API 간소화 및 정리 사라진 주요 API Session control_dependencies, global_variables_initializer 1.x 버전 호환 API도 tf.compat.v1.Session..." }, { "title": "PyTorch-Basics", "url": "/posts/PyTorch/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:30:08 +0900", "snippet": "PyTorchTorch Lura 기반의 딥러닝 프레임워크로 Facebook, Twitter, Google의 개발자들이 개발 알고리즘 모듈화, 데이터 전처리, 시각화 유틸리티등 편이성이 있으나 사용자 커뮤니티문서화 부족Pytorch Torch의 직관성을 계승하고, 파이썬의 인터프리팅 특성에 맞게 즉각적으로 코드가 실행 되면서도 유연성과 빠른속도 제공특징 Define-by-Run 데이터를 계산하는 과정에서 동적으로 계싼 그래프가 구성됨 Python-first &amp;amp; Pytho-supp..." }, { "title": "Keras-Basics", "url": "/posts/Keras/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 20:10:08 +0900", "snippet": "KerasKeras 파이썬 기반의 쉽고 간결한 딥러닝 라이브러리 모듈화: 제공 모듈은 독립적이고, 설정 가능하며 제약이 적음 단순성: 간결하고 이해가 쉬우나 속도와 혁신성은 떨어질 수 있음 확장성: 새로운 클래스 및 함수로 모듈 추가 가능구성 모델 가장 핵심적인 데이터 구조 순차적(Sequential) 모델로 레이어를 쉽게 쌓을 수 있음 다중 출력 등 복잡한 모델은 Keras 함수 API 사용 학습 과정 데이터 생성 모델 구성 ..." }, { "title": "Deep Learning Basics3", "url": "/posts/Basic-DeepLearning3/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:13:08 +0900", "snippet": "Numpy&amp;amp;DeepLearningReluclass Relu: def __init__(self): self.mask = None def forward(self, x): self.mask = (x &amp;lt;= 0) out = x.copy() out[self.mask] = 0 return out def backward(self, dout): dout[self.mask] = 0 dx = dout re..." }, { "title": "Tensorflow1", "url": "/posts/Tensorflow1/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-20 19:10:08 +0900", "snippet": "Tensorflow BasicsTensor 벡터 계산을 단순화하기 위해 여러 같은 성질의 벡터를 한 행렬 안에 표기하고 그것을 단순화하여 표기한 것 Rank 텐서의 Rank는 간단히 말해서 ‘몇 차원 배열이냐’를 의미한다. Tensorflow Tensor를 Flow 시키면서 데이터를 처리하는 라이브러리 텐서는 계산 그래프 구조(Computational Graph)를 통해 노드에서 노드로 flow 계산 그래프(Computation Graph) 계산의 ..." }, { "title": "CPU &amp; GPU", "url": "/posts/CPU-GPU/", "categories": "HardWare, Basics", "tags": "cpu, gpu, dl", "date": "2020-10-20 18:00:08 +0900", "snippet": "CPU &amp;amp; GPUCPU 컴퓨터 시스템을 통제하고 프로그램의 연산을 실행하고 처리하는 가장 핵심적인 컴퓨터의 제어 장치 수많은 작업을 수행할 수 있는 범용 처리 장치GPU 고해상도의 이미지와 비디오를 고속으로 처리할 수 있도록 설계된 프로그래밍 가능한 프로세서 수천개의 프로세싱 코어가 동시에 다수의 데이터에 병렬 동작을 수행 GPGPU(General-Purpose computing on GPU) GPU의 실시간 대량 연산 특성을 활용해 특정 영역에서 CPU보다 좋은 계산 능력을 보여줄 수..." }, { "title": "Deep Learning Basics2", "url": "/posts/Basic-DeepLearning2/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-12 19:13:08 +0900", "snippet": "용어 정리###epoch One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE###batch Total number of training examples present in a single batch.mini batch 경사하강 전체 데이터를 batch_size개씩 나눠 배치로 학습(배치 크기를 사용자가 지정) BGD보다 계산량이 적다. (Batch Size에 따라 계산량 조절 가능) S..." }, { "title": "Deep Learning Basics", "url": "/posts/Basic-DeepLearning/", "categories": "DL, Basics", "tags": "dl, basics", "date": "2020-10-03 19:13:08 +0900", "snippet": "Introduction 인공 신경망이란 무엇인가?시냅스의 결합으로 네트워크를 형성한 인공 뉴런이 학습을 통해서 서로 간의 결합의 세기를 조정해 문제 해결능력을 갇는 비선형 모델종류 지도 학습 비지도 학습 강화 학습구조 입력 말 그대로 입력되는 방대한 양의 데이터를 의미 크게 자연어와 이미지로 분류됨 모델(뉴런) 가중치 값으로 구성된 행렬으로 입력값을 가중치 값에 곱해 hypothesis 값을 산출해 낸다 활성화 함수 뉴런을 통해 들어온 값을 특정한 함수를 통해 활성화 시키고 비 ..." }, { "title": "R-CNNs Tutorial", "url": "/posts/R-CNN-Tutroial/", "categories": "Vision, CNN", "tags": "rcnn, dl", "date": "2020-09-17 19:12:55 +0900", "snippet": "Intorduction기존의 Object detection은 입력영상안의 0~N개의 모든 클래스에 대해 Classifiaction을 수행해야 합니다. classification 과 localization을 수행하는 법에 대해서 알아보겠습니다.(참고: 이 포스트는 https://blog.lunit.io/2017/06/01/r-cnns-tutorial/를 참고하여 만들어 졌음을 알립니다.)Native Approach처음 떠오르는 방법은 가능한 모든 영역에 대해 sliding window 방식으로 이미지를 탐색하면 classific..." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2019-08-14 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write m..." }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may need to replace them with your own. The following sections will guide you how to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, a..." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts/ of the root directory. Please note that the EXTENSION must be one of md and markdown.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD..." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at o..." }, { "title": "Profile", "url": "/posts/Profile/", "categories": "Profile", "tags": "profile", "date": "1996-09-18 01:00:00 +0900", "snippet": "Introduction 이름 : 남 정 진 경력 : 신입Contact &amp;amp; Channel Eamil: philipwq3963@gmail.com Github: https://github.com/JeongJin984/" } ]
